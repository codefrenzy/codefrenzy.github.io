<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xml:base="http://annievella.com/">
  <channel>
    <title>Posts on Annie Vella</title>
    <link>http://annievella.com/posts/</link>
    <description>Recent content in Posts on Annie Vella</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>annie.luxton@gmail.com (Annie Vella)</managingEditor>
    <webMaster>annie.luxton@gmail.com (Annie Vella)</webMaster>
    <copyright>© Copyright 2025 Annie Vella</copyright>
    <lastBuildDate>Fri, 27 Jun 2025 00:00:00 +1300</lastBuildDate>
    <atom:link href="http://annievella.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Heart of Software Engineering Still Beats</title>
      <link>http://annievella.com/posts/the-heart-of-software-engineering-still-beats/</link>
      <pubDate>Fri, 27 Jun 2025 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/the-heart-of-software-engineering-still-beats/</guid>
      <description>
      
      
      <![CDATA[<p>A few weeks ago, I had a conversation that&rsquo;s stayed with me. A colleague from another department said: <em>&ldquo;I&rsquo;ve always been able to read and understand code, even debug it, but I could never write it.&rdquo;</em></p>
<p>Something about this revelation stayed with me. Most people I&rsquo;ve met outside the software engineering world tend to describe code as unintelligible - like hieroglyphics. I guess that&rsquo;s why I&rsquo;ve always assumed: if someone couldn&rsquo;t write code, they probably couldn&rsquo;t read it either.</p>
<p>But this person isn&rsquo;t a software engineer. They don&rsquo;t work in a role where coding is expected. And yet, they can read it. Follow its logic. Understand enough to debug it.</p>
<p>That was new to me. I&rsquo;ve worked with plenty of people who can&rsquo;t code - that&rsquo;s normal. But someone who can read code fluently, yet feels unable to write it, struck me as an unusual inversion of what I&rsquo;d always assumed.</p>
<h2 id="modelling-not-just-typing">Modelling, Not Just Typing</h2>
<p>Writing code isn&rsquo;t just knowing syntax. It&rsquo;s not just about conditionals or classes or regexes. At its heart, writing code is modelling - the ability to form a structured mental model of a process, a system, or an idea, and then encode it in a way that a machine can understand.</p>
<p>What you&rsquo;re creating is a <em>representation</em>: a digital reflection of something real, or imagined. Sometimes that model lives in your head. Sometimes it spills out across a whiteboard or a sheet of paper. But it&rsquo;s always there - an abstraction you&rsquo;re building, refining, naming. You&rsquo;re spotting patterns, finding generalisations, shaping structure from chaos. And then translating all of it into syntactically correct code.</p>
<p>This is what&rsquo;s always drawn me to programming. The act of shaping a mental image, refining it through thought, and watching it come to life. Even today, after decades in this industry, there&rsquo;s still something magical about it.</p>
<p>As <a href="https://en.wikipedia.org/wiki/Fred_Brooks">Fred Brooks</a>, author of the very famous book <a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month">The Mythical Man-Month</a>, put it:</p>
<blockquote class="large-quote" style="font-size: 1.5em; margin: 30px 40px 0 40px">The programmer, like the poet, works only slightly removed from pure thought‑stuff. He builds his castles in the air, from air, creating by exertion of the imagination...</blockquote>
<p style="margin: 10px 40px 30px 40px; font-size: 0.8em;"><em>— Frederick P. Brooks, The Mythical Man-Month, Chapter 1, Addison-Wesley, 1975</em></p>
<p>That image - that castle in the air - is what draws many of us to code. It&rsquo;s abstract, fragile, and yet, when the build succeeds, it becomes something real. A living, running representation of our ideas.</p>
<p>And we don&rsquo;t get there by accident. The transition from mental model to working system happens through <strong>design</strong> - a process of making trade-offs, choosing abstractions, and shaping the code in a way that reflects not just what works, but what makes sense.</p>
<h2 id="design-isnt-a-phase">Design Isn&rsquo;t a Phase</h2>
<p>In some organisations, design is treated as a one-off activity. It happens at the beginning of a project, often in a different room, done by someone else with a different title. Sometimes it&rsquo;s even handed down like a blueprint to be implemented.</p>
<p>But anyone who&rsquo;s spent time building software knows: design is <em>everywhere</em>. It&rsquo;s in how you break down a problem. In the abstractions you choose. In the edge cases you decide to handle - or not. Design happens during implementation, during testing, during bug fixing, and even while reading logs to understand why something failed in production.</p>
<p><a href="https://en.wikipedia.org/wiki/John_Ousterhout">John Ousterhout</a> said it plainly in his <a href="https://www.youtube.com/watch?v=lz451zUlF-k">recent interview</a> with <a href="https://www.linkedin.com/in/gergelyorosz/">Gergely Orosz</a>:</p>
<blockquote class="large-quote" style="font-size: 1.5em; margin: 30px 40px 0 40px">My personal belief is that design permeates the entire development process. You do it upfront, you do it while you're coding, you do it while you're testing, you do it while you're fixing bugs; you should constantly be thinking about design.</blockquote>
<p style="margin: 10px 40px 30px 40px; font-size: 0.8em;"><em>— John Ousterhout, interview with Gergely Orosz</em></p>
<p>Design isn&rsquo;t a step we move past - it&rsquo;s how we evolve our representations. It&rsquo;s how we learn what we missed, or overcomplicated, or misunderstood. And it&rsquo;s deeply satisfying. There&rsquo;s a quiet joy in realising you&rsquo;ve found a better way to shape something. That your system is more robust, more elegant, more humane because of it. Sometimes that shift is architectural. Sometimes it&rsquo;s a single line. The devil might be in the details - but so is the beauty. And that&rsquo;s where the craft lives too.</p>
<h2 id="a-memory-that-still-moves-me">A Memory That Still Moves Me</h2>
<p>I still remember the first time I saw an idea come to life on screen. I was six years old, sitting at my Commodore 64, carefully typing out lines from a manual I barely understood.</p>
<p>There were no variables to name. No functions to design. I was just copying commands - faithfully, line by line. I didn&rsquo;t know what a loop was, or what DATA meant. But I typed RUN, pressed RETURN, and something happened.</p>
<p>A face appeared.</p>
<figure class="center"><img src="http://annievella.com/images/commodore-64-sprite.jpeg"
    alt="Commdore 64 Sprite"><figcaption>
      <p>My first creation in BASIC, from the Commodore 64 manual</p>
    </figcaption>
</figure>

<p>Not a great one. Just a blocky pixel sprite. But it <em>moved</em>. It smiled at me from the screen, and I smiled back - stunned that text I&rsquo;d typed had become something visual that moved.</p>
<p>I wasn&rsquo;t designing anything of my own. I wasn&rsquo;t solving a problem or building a system from scratch. But at six years old, that didn&rsquo;t matter. Seeing those symbols turn into something alive on screen was enough to hook me for life.</p>
<p>Looking back now, I realise what captivated me wasn&rsquo;t the syntax. It was the revelation of possibility - that words could become images. That logic could shape behaviour. That you could <em>model something invisible, nothing more than pure thought</em>, and then <em>run it</em>.</p>
<p>Even now, decades later, that moment still moves me.</p>
<h2 id="what-we-learned-to-see">What We Learned to See</h2>
<p>Over time, the magic becomes more than just the image on the screen. You start to notice what&rsquo;s behind it.</p>
<p>The way the code is structured. Where it flows, and where it fights itself. You begin to <em>feel</em> when a function is doing too much. When an abstraction leaks. When a variable name is quietly misleading.</p>
<p>You might hear about these principles in lectures or read them in books, but theory alone doesn&rsquo;t stick. It&rsquo;s when you inherit a codebase that fights you at every turn that you truly understand why these things matter. When you spend hours untangling what should have been simple. When you feel the cost of all those shortcuts taken over the years.</p>
<p>That&rsquo;s when you develop an intuition - an internal radar for what&rsquo;s brittle, what&rsquo;s elegant, what&rsquo;s deceptively complex.</p>
<p>Code starts to feel less like a puzzle to solve and more like a conversation to understand. You begin to recognise fingerprints. This bit was clearly rushed. That bit was lovingly crafted. This change came from someone who knew the system inside out. That one&hellip; maybe not.</p>
<p>In this evolution, the magic deepens. What started as wonder at seeing code come to life on screen becomes appreciation for how we organise thought itself. Writing code isn&rsquo;t just how we instruct a machine - it&rsquo;s how we give shape to our own understanding. A way to turn thought into structure. Intent into form.</p>
<h2 id="the-test-we-all-had-to-pass">The Test We All Had to Pass</h2>
<p>For many of us, reading and writing code wasn&rsquo;t just a skill, it was a test. Quite literally.</p>
<p>Coding interviews. Live whiteboarding. We were asked to write functions from scratch, under pressure, with someone watching. We weren&rsquo;t just trying to solve problems - we were trying to <em>show our thinking</em>.</p>
<p>We prepared diligently. Memorised sorting algorithms. Practised recursion and dynamic programming. Optimised for time and space complexity. And for all their flaws, these interviews taught us something. They taught us how to trace logic out loud. How to structure an approach. How to fail gracefully, and recover.</p>
<p>For some, platforms like <a href="https://leetcode.com/">LeetCode</a> and <a href="https://www.hackerrank.com">HackerRank</a> evolved beyond mere preparation. They became a kind of personal challenge. A way to stay sharp. To prove to yourself that you still could. Leaderboards and contests sprang up, and with them, a sense of competition. Bragging rights. Mastery, on display.</p>
<p>We wore those battle scars with pride. Not because the process was fair, but because it was hard. Because it demanded something real from us: our ability to model, abstract, and express ideas clearly, under pressure.</p>
<p>It was stressful, yes. Sometimes unfair. But it reinforced that writing code was a kind of thinking - a visible trace of our structured understanding. And being good at it meant being able to shape those models quickly and clearly.</p>
<p>And now?</p>
<p>Well, it&rsquo;s complicated. AI coding assistants can pass these tests too. They can write elegant solutions. Sometimes better than we can. They don&rsquo;t get nervous. They don&rsquo;t forget to handle an edge case. They just&hellip; output.</p>
<p>Which makes you wonder: if the thing that defined at least part of our entry into this field can now be automated, what does that mean for what comes next?</p>
<h2 id="a-shift-that-feels-personal">A Shift That Feels Personal</h2>
<p>Maybe that&rsquo;s why the rise of generative AI is hitting us in a different way. It&rsquo;s not just about productivity gains. It&rsquo;s about what&rsquo;s being displaced.</p>
<p>A few months ago, I wrote a post called <a href="https://annievella.com/posts/the-software-engineering-identity-crisis/">The Software Engineering Identity Crisis</a>. It clearly struck a nerve - almost 60,000 views in just a few weeks. Dozens of engineers reached out personally to share their experiences. The message was consistent: <em>&ldquo;Yes. This is exactly what I&rsquo;ve been feeling, but hadn&rsquo;t put into words.&rdquo;</em></p>
<p>There&rsquo;s a quiet discomfort rippling through our industry. And I think this is part of it.</p>
<p>We&rsquo;ve spent years honing a craft that&rsquo;s part logic, part intuition, part art. And now we&rsquo;re watching tools - not just assist us, but perform the very thing many of us took deep pride in: that mental modeling, that translation of abstract thought into executable form.</p>
<p>A recent <em>New York Times</em> article captured this tension. Titled <a href="https://www.nytimes.com/2025/05/25/business/amazon-ai-coders.html">At Amazon, Some Coders Say Their Jobs Have Begun to Resemble Warehouse Work</a>, it describes how some engineers feel monitored, controlled, and pushed to deliver at unrelenting speed, echoing the dynamics of factory labour. The piece suggests a subtle but profound shift in the nature of engineering work: from craft to throughput. From autonomy to optimisation.</p>
<p>And one line hit particularly hard:</p>
<blockquote class="large-quote" style="font-size: 1.5em; margin: 30px 40px 0 40px">This shift from writing to reading code can make engineers feel as if they are bystanders in their own jobs.</blockquote>
<p style="margin: 10px 40px 30px 40px; font-size: 0.8em;"><em>— The New York Times, May 2025</em></p>
<p>This is what devaluation can look like. Not being replaced, but being sidelined. The moments we used to savour - the ones that brought flow, and joy, and pride - are becoming rarer. Shorter. Edged out by something faster, more efficient, and strangely hollow.</p>
<p>We&rsquo;re adapting, yes. But part of us is grieving too.</p>
<h2 id="finding-our-place">Finding Our Place</h2>
<p>There&rsquo;s no denying it - this technology is absolutely incredible. It can write code that many people feel they never could. But along with that comes a sense that something uniquely human is being devalued - that creative spark that transforms abstract thought into working systems.</p>
<p>In the art community, a similar conversation is happening. Artists have started using &ldquo;<a href="https://www.forbes.com/sites/lesliekatz/2024/07/17/human-intelligence-art-movement-takes-defiant-stand-against-ai/">Created with Human Intelligence</a>&rdquo; badges on their work.</p>
<figure class="center"><img src="http://annievella.com/images/created-with-human-intelligence.png"
    alt="Created with Human Intelligence"><figcaption>
      <p>Beth Spencer - Created with Human Intelligence</p>
    </figcaption>
</figure>

<p>Kick-started by <a href="https://bethspencerillustration.com">Beth Spencer</a>, this is a quiet rebellion against the tide of AI-generated content. Not because AI art isn&rsquo;t impressive, but because there&rsquo;s something worth preserving in the human creative process itself.</p>
<p>Don&rsquo;t get me wrong - I&rsquo;m not suggesting we resist progress. The world is changing, and we <em>need to change with it</em>. This shift is opening up new possibilities we’re only just beginning to explore. But I still carry a deep appreciation for the moments when code felt like pure magic - when shaping an idea into something runnable brought clarity, joy, and a sense of creation that was entirely our own.</p>
<p>The future of software engineering is being redefined before our eyes. If you, like me, have taken pleasure in the creation of code, we need to find new ways to experience that same satisfaction. These tools are improving rapidly, and businesses are eager to leverage them to their full potential.</p>
<p>For now, we still need to guide these assistants carefully. But that will change over time. The question becomes: how do we preserve what matters most about our craft while embracing what comes next?</p>
<h2 id="from-prompts-to-context">From Prompts to Context</h2>
<p>At its core, programming has always been about modelling - taking something abstract and giving it a structure that can run. Sometimes we do that by writing code. But more and more, we&rsquo;re doing it by shaping the context around a tool that writes the code for us.</p>
<p>Prompt engineering felt like the next abstraction layer. A clever way to influence the output. And for a while, it was.</p>
<p>But as these tools evolve, we&rsquo;re learning that the real power isn&rsquo;t in the prompt. It&rsquo;s in the <strong>context</strong>. The true challenge lies in encoding the messy real world into something a machine can work with - that&rsquo;s far harder than simply generating code.</p>
<figure class="center"><img src="http://annievella.com/images/tweet-context-engineering.png"
    alt="Is context engineering the new prompt engineering?"><figcaption>
      <p>Is context engineering the new prompt engineering?</p>
    </figcaption>
</figure>

<p>The systems that perform best aren&rsquo;t those with the cleverest prompts - they&rsquo;re the ones with the clearest scaffolding. Good documentation. Consistent naming. Representative examples. The kind of subtle cues that help an AI understand what <em>good</em> looks like in <em>your specific context</em>.</p>
<p>As Ibrahem Amer explains in his article on <a href="https://www.linkedin.com/pulse/prompt-engineering-vs-context-ibrahem-amer-inzdf/">prompt engineering versus context engineering</a>, this approach involves multiple layers: from foundational knowledge structures to data integration systems to the moment-by-moment context delivery. It&rsquo;s not just about crafting clever instructions - it&rsquo;s about building an entire environment in which the AI can operate effectively.</p>
<p>And this changes how we show our skill.</p>
<p>It&rsquo;s not about being a prompt whisperer. It&rsquo;s about structuring what the tool sees. Giving it the right framing. Guiding its attention. Helping it learn from the materials we&rsquo;ve already shaped.</p>
<p>In other words, we&rsquo;re still designing systems. Still modelling complexity. Still shaping abstractions.</p>
<p>The shape of our work may be changing. But the underlying skill - the ability to see clearly, structure thoughtfully, and model well - remains at the heart of it all.</p>
<h2 id="the-convergence-of-tool-and-component">The Convergence of Tool and Component</h2>
<p>This shift in skill - from crafting code to crafting prompts, and now, to crafting context - becomes even more important when we realise that AI isn&rsquo;t just helping us build software; it&rsquo;s becoming part of the software itself.</p>
<p>AI is no longer just a tool we use to build software. It&rsquo;s becoming a component inside the systems we build. But when we use AI to help us build software that contains AI&hellip; where does the boundary lie?</p>
<p>The distinction starts to blur. The AI becomes both the engine and the product - at least, that&rsquo;s how it can feel. And while the boundary is blurry in practice, thinking of them separately can still be a helpful distinction, especially when things start to feel fluid.</p>
<p>This idea resonated strongly with me during <a href="https://www.linkedin.com/in/simonwardan/">Simon Warden</a>&rsquo;s talk, <a href="https://australian.software/YOW2025/">AI as the Engine, Not the Product</a>, at the <a href="https://yowcon.com/tech-leaders-brisbane-2025">YOW! Tech Leaders Summit</a>. He articulated how the most successful AI implementations aren&rsquo;t those that just expose capabilities, but those that orchestrate them thoughtfully within systems.</p>
<p>We&rsquo;re still engineers. But the materials have changed.</p>
<p>The skill isn&rsquo;t vanishing. It&rsquo;s resurfacing - at a different altitude.</p>
<h2 id="the-joy-reframed">The Joy, Reframed</h2>
<p>We still model things that don&rsquo;t exist yet. We still shape invisible systems out of thought and logic and names. We still give <em>form to ideas</em>.</p>
<p>That joy hasn&rsquo;t gone. But its expression is shifting.</p>
<p>Today, AI handles more of the syntax. More of the scaffolding. But the architecture - the imagination behind it - is still ours to hold. The abstractions we shape. The intent we encode. The representations we choose.</p>
<p>And maybe now, with these tools beside us, we can go further. Be bolder. Imagine more ambitious castles. Explore stranger terrain. Spend less time typing - and more time thinking. Designing. Modelling.</p>
<p>Because the real craft of software engineering was never about just writing code. It was always about what we were encoding - and why.</p>
<p>That hasn&rsquo;t changed.</p>
<p>So let&rsquo;s not forget the craft. Let&rsquo;s not leave it behind.</p>
<p>Let&rsquo;s carry it forward - clearer, faster, and maybe even more joyful than before.</p>
<p>We&rsquo;re not losing our craft. We&rsquo;re being asked to deepen it. And that&rsquo;s a challenge worth accepting.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=The Heart of Software Engineering Still Beats">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>The Next Evolutionary Step</title>
      <link>http://annievella.com/posts/the-next-evolutionary-step/</link>
      <pubDate>Fri, 09 May 2025 00:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/the-next-evolutionary-step/</guid>
      <description>
      
      
      <![CDATA[<p>The recent releases of Claude Code and OpenAI Codex caught my attention, but not for the reasons you might expect. I was puzzled by the enthusiasm they&rsquo;ve generated. These are, after all, terminal tools. In an era where graphical IDEs dominate, with tools like Cursor, Windsurf, and VSCode evolving toward ever-more seamless integrations, like &lsquo;<a href="https://www.linkedin.com/posts/tomkrcha_introducing-design-mode-for-cursor-activity-7325527044459524096-tqy7">Design Mode</a>&rsquo;, why are we getting excited about terminal-based AI coding tools that feel like a step backwards?</p>
<figure class="center"><img src="http://annievella.com/images/questprobe-featuring-spider-man.png"
    alt="Questprobe Featuring Spider-Man (1984)"><figcaption>
      <p><a href="https://youtu.be/bw6KY5XaF9M?si=Sbw74N5UA71Ad27K">Questprobe Featuring Spider-Man (1984)</a></p>
    </figcaption>
</figure>

<p>This is what comes to mind when I think of a natural-language-based CLI - an old Commodore 64 text adventure game that I used to play as a kid.</p>
<p>A move back to the basics seems odd but intriguing, so I decided to give them a try and see if I could figure out what all the fuss was about.</p>
<h2 id="claude-code">Claude Code</h2>
<p>Setting it up was a breeze. Just follow the instructions <a href="https://docs.anthropic.com/en/docs/claude-code/overview">here</a> and you&rsquo;ll be up and running in no time.</p>
<p>You&rsquo;ll need an Anthropic account because you need some money on your account before you can use Claude Code. I gave mine $5 USD and it was enough to build a couple of simple apps.</p>
<p>In a weird way, it feels like I&rsquo;m <em>playing</em> Questprobe Featuring Spider-Man but instead of asking it to go north, I&rsquo;m asking it to write me an app.</p>
<figure class="center"><img src="http://annievella.com/images/building-spider-man-2025.png"
    alt="Claude Code - Building Spider-Man"><figcaption>
      <p>Claude Code - Building Spider-Man</p>
    </figcaption>
</figure>

<p>From the simple prompt, <em>&ldquo;Can you create a web-based version of the text adventure game called Questprobe Featuring Spider-Man from 1984 - <a href="https://www.squakenet.com/game/questprobe-featuring-spider-man/">https://www.squakenet.com/game/questprobe-featuring-spider-man/</a> ?&rdquo;</em>, Claude Code generated a basic but functional web-based version of Questprobe Featuring Spider-Man in less than a minute.</p>
<figure class="center"><img src="http://annievella.com/images/spider-man-2025.png"
    alt="Claude Code Spider-Man"><figcaption>
      <p>Claude Code Spider-Man</p>
    </figcaption>
</figure>

<p>I really appreciated how it created a plan and then systematically ticked off each step, all from such a simple prompt. By default, it stops and asks you to confirm each significant step - but it also gives you the option to confirm and &ldquo;not ask again this session&rdquo;.</p>
<p>Well hello dear friend, <em>vigilance decrement</em>. I knew you&rsquo;d show up sooner or later.</p>
<p>It&rsquo;s far too enticing to select that option. After all, how much reviewing are you <em>really</em> doing in the terminal window? This reminds me of something I&rsquo;ve noticed about code reviews throughout my career - they&rsquo;re one of those activities that engineers know are valuable (especially for learning about the codebase and seeing how others solve problems), but rarely enjoy doing. In most teams, you&rsquo;ll find engineers having to repeatedly ask - sometimes even beg - their colleagues to review their code. It&rsquo;s not surprising really; we engineers love <em>creating</em> things, and reviewing someone else&rsquo;s code feels about as far from creation as writing tests does. Both are essential for quality, but they don&rsquo;t scratch that builder&rsquo;s itch.</p>
<h2 id="openai-codex">OpenAI Codex</h2>
<p>Setting it up is straightforward - just follow the instructions <a href="https://github.com/openai/codex">here</a>. As with Claude Code, you&rsquo;ll need an OpenAI account with some credit before you can use it.</p>
<p>I asked Codex to analyse a really old side project of mine - an iPad game called <em>Easter Egg Hunt</em> written in Objective-C back in 2013 or so. The prompt was simple: <em>&ldquo;Can you describe the purpose of the app?&rdquo;</em></p>
<figure class="center"><img src="http://annievella.com/images/openai-codex-easterhunt.png"
    alt="OpenAI Codex Easter Egg Hunt Description"><figcaption>
      <p>OpenAI Codex Easter Egg Hunt Description</p>
    </figcaption>
</figure>

<p>Within seconds, it produced a remarkably accurate description of the app - from the three themed environments (Garden, Beach, or Snow) to the core gameplay of eggs periodically &ldquo;popping&rdquo; up in random locations. It even caught implementation details like the particle effects and chimes every five eggs, the in-app purchase system for unlocking scenes, and the use of Localytics for analytics. All this without ever seeing the app running or having any screenshots - just pure code comprehension.</p>
<p>Encouraged, I pushed a little further. <em>&ldquo;Draw some high-value diagrams using Mermaid that would help a new engineer understand this codebase.&rdquo;</em></p>
<p>The results were genuinely impressive. Codex generated a series of clear, thoughtful visuals - from class relationship diagrams showing the core game structure to sequence diagrams illustrating the gameplay flow. These diagrams captured relationships that would take hours for a human to extract from unfamiliar code.</p>
<figure class="center"><img src="http://annievella.com/images/openai-codex-easterhunt-class-diagram.png"
    alt="OpenAI Codex Easter Egg Hunt Class Diagram"><figcaption>
      <p>OpenAI Codex Easter Egg Hunt Class Diagram</p>
    </figcaption>
</figure>

<figure class="center"><img src="http://annievella.com/images/openai-codex-easterhunt-sequence-diagram.png"
    alt="OpenAI Codex Easter Egg Hunt Sequence Diagram"><figcaption>
      <p>OpenAI Codex Easter Egg Hunt Sequence Diagram</p>
    </figcaption>
</figure>

<p>Think about onboarding - in minutes, a new engineer could understand a codebase that would normally take days to unravel.</p>
<p>While these CLI tools might seem like a step backward, I was starting to see glimpses of something more interesting emerging.</p>
<h2 id="beyond-the-terminal-interface">Beyond The Terminal Interface</h2>
<p>For developers used to modern IDEs, returning to the terminal might feel like a blast from the past. But focusing on the interface misses something crucial.</p>
<p>These tools aren&rsquo;t here to replace our IDEs - they represent the next natural evolutionary step in development. A step where AI intelligence can be embedded throughout our entire workflow.</p>
<p>Both OpenAI Codex and Claude Code can run in <em>headless mode</em>, allowing them to be integrated into pipelines, scheduled tasks, and automated testing suites. Claude Code offers a <a href="https://docs.anthropic.com/en/docs/claude-code/cli-usage#print-mode-details">non-interactive mode</a> designed for programmatic use. OpenAI Codex similarly supports a <a href="https://github.com/openai/codex#non-interactive--ci-mode">non-interactive / CI mode</a> for use in pipelines.</p>
<figure class="center"><img src="http://annievella.com/images/openai-codex-non-interactive-mode.png"
    alt="OpenAI Codex Non-Interactive Mode"><figcaption>
      <p>OpenAI Codex Non-Interactive Mode</p>
    </figcaption>
</figure>

<p>This capability transforms these AI assistants from mere copilots into programmable units of intelligence that can be woven seamlessly into our larger systems. The implications of this shift are significant.</p>
<p>Imagine this:</p>
<ul>
<li>After your build, test and deploy steps, get Claude Code to generate a series of diagrams for your codebase which it can then safely stash away in your documentation repository as a snapshot-in-time.</li>
<li>You know those pesky flaky tests that keep causing your pipeline to break but aren&rsquo;t always easy to fix (even if you did have time to look at them)? Why not get OpenAI Codex to help you fix them automatically?</li>
<li>It could perform a <em>pre-post-mortem</em> analysis - evaluating the combined impact of changes and assessing risks across all dimensions (operational incidents, security vulnerabilities, change reversibility) before they become real problems.</li>
</ul>
<p>What we&rsquo;re seeing is just the beginning. Think about all the repetitive, time-consuming steps in our development lifecycle - both inner loop activities like coding and outer loop activities like reviews and documentation. These tools are opening up possibilities to automate not just the coding itself, but also those friction-heavy outer loop activities that often slow us down. As <a href="https://abinoda.com">Adi Noda</a>, CEO and cofounder of DX, recently said in a Gartner Podcast that was asking the question <em><a href="https://open.spotify.com/episode/3W2VCLGTI31is9AFbgDhGr?si=eaca8a061feb4e24">Does Developer Experience Really Matter?</a></em>:</p>
<blockquote>
<p>We tend to see more outer loop friction points than inner loop. So code reviews, CI, and release processes tend to surface as greater areas of friction than the inner loop.</p>
</blockquote>
<p>We now have the tools to address these outer loop friction points, automating away the steps we know add value but don&rsquo;t enjoy doing. While these tools are still relatively simple, they represent a natural evolution in the AI-driven development era - one that unlocks opportunities far beyond just writing code.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>When I first encountered these terminal-based tools, I couldn&rsquo;t help but wonder if we were taking a step backward. But that initial reaction missed something important: this isn&rsquo;t about the interface - it&rsquo;s about programmability.</p>
<p>Just as git&rsquo;s command-line interface enabled countless automation workflows, these AI assistants can be invoked programmatically to work silently in the background - from reviewing code to generating documentation to managing releases.</p>
<p>This is how evolution often works - not in dramatic leaps, but in subtle shifts that fundamentally change how we work. Software engineering isn&rsquo;t <em>dead</em>, but it is changing. The next step is yours to take: look at your development workflow, identify the friction points, and consider how to weave these capabilities into your pipeline.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=The Next Evolutionary Step">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>You Can’t Prompt Your Way to Intuition</title>
      <link>http://annievella.com/posts/you-cant-prompt-your-way-to-intuition/</link>
      <pubDate>Fri, 18 Apr 2025 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/you-cant-prompt-your-way-to-intuition/</guid>
      <description>
      
      
      <![CDATA[<p>We don’t talk enough about the <em>feeling</em> of learning something deeply - the slow, sometimes frustrating and painful process that forges real intuition.</p>
<p>As software engineers, we know this feeling intimately. The slow burn of mastering a new concept or language. The pressure and anxiety of resolving your first production issue. The endless hours spent debugging a complex system that just won&rsquo;t work - until, at last, it does. And how that struggle itself is the point: it&rsquo;s what transforms a beginner coder into a software engineer with real intuition.</p>
<p>And yet, in the age of AI, that friction is exactly what we&rsquo;re designing away.</p>
<p>GitHub Copilot, ChatGPT, Cursor, Windsurf - they&rsquo;re extraordinary tools. They&rsquo;ve changed the way we work. They accelerate us. They enable us to solve problems we previously would&rsquo;ve struggled with. They&rsquo;re becoming the new normal.</p>
<p>But they also flatten the terrain. And when the terrain is too smooth, we stop noticing what we&rsquo;re stepping over.</p>
<h2 id="the-need-for-speed">The Need for Speed</h2>
<p>As a society, we&rsquo;ve become obsessed with speed. In a world of endless notifications, instant messages, and constant demands for more, we&rsquo;ve normalised a state of perpetual acceleration.</p>
<p>This obsession with speed is especially prevalent in software delivery. In the tech industry, the race to ship new features is relentless. If you&rsquo;re not moving fast, you risk falling behind. Companies compete to launch first, to capture attention, to prove they can outpace the rest. That urgency flows straight to the engineer&rsquo;s desk. We work at a breakneck pace, juggling Slack alerts about pull requests, dashboards updating in real time, CI/CD pipelines demanding ever-faster iterations. We&rsquo;re always looking for ways to do more, faster - to shortcut the things that can be shortcut, to automate the parts that can be automated.</p>
<p>This relentless drive for speed and efficiency has shaped every aspect of how we build software. For decades, we&rsquo;ve chased new ways to get more done: frameworks, libraries, automation scripts, cloud deployments, microservice architectures, new methodologies - each one promising to help us move faster. Now, AI is the latest - and most powerful - shortcut yet. Everywhere you look, people are posting about how much faster they can build software with AI: how many lines of code they&rsquo;ve refactored in a fraction of the time, how much boilerplate they&rsquo;re avoiding with a single prompt, how quickly they&rsquo;re spinning up entire new businesses in a weekend. And yes, that velocity is valuable. Those productivity gains are real - and it’s changing the landscape.</p>
<h2 id="the-myth-of-the-shortcut">The Myth of the Shortcut</h2>
<p>One of the changes we&rsquo;re seeing is that a new generation of engineers is moving at a pace that would have been unimaginable just a few years ago. Steve Yegge’s <a href="https://sourcegraph.com/blog/revenge-of-the-junior-developer">Revenge of the Junior Developer</a> captures this shift: junior developers, empowered by AI, are moving faster than ever - sometimes outpacing their more experienced peers. He explains how junior engineers are &lsquo;vibing&rsquo;. They <em>get it</em>. Essentially, AI coding assistants can act as powerful exoskeletons for anyone willing to adapt, enabling them to do work that previously required much more experience.</p>
<p>Shortcuts have their place. They open doors and accelerate growth. But speed doesn&rsquo;t build engineering intuition.</p>
<p>There’s something disorienting about how good these tools are at helping you <em>sound</em> like an expert. They give you the answers - but they don&rsquo;t teach you how to <em>notice the problem</em> in the first place. And they certainly don&rsquo;t teach you how to trust your instincts.</p>
<p>That’s the real danger of shortcuts: they make you feel powerful and productive, but can lull you into a false sense of security. Without the intuition and habits forged by experience - knowing when to be wary, when to back up, when to double-check - you&rsquo;re at risk of costly mistakes. These lessons aren&rsquo;t learned by skipping to the answer; they&rsquo;re earned by wrestling with real problems.</p>
<p>Cautionary tales like the one below are popping up everywhere - not necessarily because people lack technical skill, but because they haven&rsquo;t yet built the judgement to anticipate, prevent, or recover from disaster.</p>
<figure class="center"><img src="http://annievella.com/images/ai-destroys-months-of-work.png"
    alt="AI Destroys Months of Work"><figcaption>
      <p><a href="https://www.reddit.com/r/cursor/comments/1inoryp/cursor_fck_up_my_4_months_of_works/">AI Destroys Months of Work</a></p>
    </figcaption>
</figure>

<p>It&rsquo;s not gatekeeping to say that some things still take time. It&rsquo;s just how humans learn.</p>
<p>Santiago Valdarrama’s blog post <a href="https://www.svpino.com/articles/coding-is-over-now-what/">&ldquo;Coding is over. Now what?&rdquo;</a> points out that as AI commoditises coding, the most valuable skills become things like <em>identifying the right problem, framing it well, and designing elegant, maintainable solutions</em>. But what’s often glossed over is the uncomfortable reality that these aren&rsquo;t skills you can simply acquire overnight or skip straight to. No one seems to be talking about how the next generation of engineers is supposed to leapfrog past the years of debugging sessions, architectural missteps, and system rewrites that forge true intuition. How do you even know what an elegant, maintainable solution looks like if you&rsquo;ve never had to live with the consequences of a brittle one? These abilities are forged in the messy middle, through friction and deliberate practice - not by shortcutting your way to the answer.</p>
<p>What ties all these higher-order skills together is a kind of engineering intuition - a sense for what matters, what will work, and what might go wrong in different contexts. But intuition isn&rsquo;t something you can prompt for or download; it&rsquo;s earned by moving through the gradual stages of real skill acquisition.</p>
<h2 id="the-dreyfus-model-why-intuition-cant-be-prompted">The Dreyfus Model: Why Intuition Can&rsquo;t Be Prompted</h2>
<p>The Dreyfus Model is one of the best tools I’ve found to help make sense of this journey, both for myself and for others I’ve coached. If you&rsquo;ve never heard of it or how it can be applied to software engineering careers, <a href="https://hackernoon.com/software-engineer-qualification-levels-junior-middle-and-senior-f2229591df1c">this article provides a good overview</a>.</p>
<figure class="center"><img src="http://annievella.com/images/dreyfus-model.png"
    alt="Dreyfus Model of Skill Acquisition"><figcaption>
      <p>The Dreyfus Model of Skill Acquisition</p>
    </figcaption>
</figure>

<p>The model describes five stages, each reflecting a shift in how we use recollection, recognition, decision-making, and awareness.</p>
<ol>
<li><strong>Novice</strong> – You follow rules and instructions exactly as given; your recollection and recognition are limited to what you’ve been explicitly taught; you make decisions by following step-by-step guidance; your awareness is focused tightly on the immediate task - bigger-picture context isn’t relevant (and wouldn’t help much even if someone tried to give it to you).</li>
<li><strong>Advanced Beginner</strong> – You start to recognise recurring patterns and situations; your recollection of similar experiences begins to inform your actions; you still depend on rules but with some flexibility; your awareness starts to expand, but you’re still mostly focused on the task at hand, with only glimpses of the broader context.</li>
<li><strong>Competent</strong> – You can plan, troubleshoot, and prioritise; your recognition of patterns is stronger; you draw on a growing bank of experiences; your decision-making involves conscious choice and analysis; your awareness now includes both immediate tasks and the bigger picture. At this stage, you begin to adapt rules to fit the situation and can finally make use of wider context.</li>
<li><strong>Proficient</strong> – You see the big picture and adapt flexibly; your recollection is automatic for most situations; your recognition is rapid and intuitive; your decisions are guided by experience but still involve reflection; your awareness includes anticipating outcomes and adjusting in real time. You often know when to break the rules and why.</li>
<li><strong>Expert</strong> – You operate from deep intuition; your recognition and recollection are seamless and often unconscious; you make decisions fluidly, often without deliberate analysis; your awareness is holistic, allowing for creative and adaptive responses. At this level, you’re often the one creating new rules, patterns, or heuristics for others to follow.</li>
</ol>
<p>The crucial thing is that you can’t simply skip these stages - no matter how powerful the AI or how quickly you pick up new syntax. Intuition is built by moving through each phase, not by bypassing the messy middle. There’s a reason it’s often said that reaching true expertise in any field takes years, not weeks - sometimes a decade or more.</p>
<p>That’s what I love about the Dreyfus Model: it normalises friction. The path to expertise is supposed to be bumpy. That’s not a flaw - it’s a feature, backed by decades of research on skill acquisition and deliberate practice.</p>
<p><a href="https://psycnet.apa.org/doiLanding?doi=10.1037%2F0033-295X.100.3.363">Ericsson et al. (1993)</a> established that expertise isn&rsquo;t simply a function of experience, but of <em>deliberate</em> practice - focused, effortful work aimed at improving specific aspects of performance. Further studies, including <a href="https://dl.acm.org/doi/10.1145/3545945.3569759">Becker et al. (2023)</a>, have explored how these principles apply to programming specifically, showing that enduring mastery requires more than repetition - it requires reflection and productive struggle. This aligns with recent educational research by <a href="https://ieeexplore.ieee.org/document/10213396">Bull and Kharrufa (2024)</a>, who argue that effective learning with AI must integrate human reflection and effort - not bypass it.</p>
<p>This finding is reinforced by an MIT study, as described in Esther Shein&rsquo;s paper <a href="https://dl.acm.org/doi/10.1145/3673428">The Impact of AI on Computer Science Education</a>. In the study, students were split into three groups and given a Fortran task - a language none of them knew. One group used ChatGPT, another used Meta&rsquo;s Code Llama, and a third used only Google. While the ChatGPT group solved the task the fastest, they failed to retain what they had learned and performed poorly in follow-up assessments. The Code Llama group performed slightly better, but the Google group - who had to break the problem down into smaller parts - retained the most and performed best. As the study put it: <em>“Working hard and struggling is actually an important way of learning.”</em> The results underscore this central claim: that real understanding comes not from being handed solutions, but from working through the friction to reach them.</p>
<p>This matters now more than ever, because AI tools give us fluent syntax and confident answers - but they don&rsquo;t give us the pattern recognition or judgement that only comes from working through the mess.</p>
<h2 id="embrace-the-seams">Embrace the Seams</h2>
<p>Some researchers are starting to recognise this risk and are exploring ways to design AI tools that don’t just hand you answers, but invite you into the process. <a href="https://ieeexplore.ieee.org/abstract/document/10857384">Inman et al. (2025)</a> at Google call this idea <em>Seamful AI</em>: instead of hiding uncertainty and ambiguity, these tools could surface the “seams” - the places where the answer isn’t clear-cut, or where multiple paths might be valid.</p>
<p>Why does this matter? Because it’s in those moments of ambiguity and uncertainty - when you have to pause, weigh options, and make a judgment call - that real learning happens. Exposing the seams doesn’t just make AI more transparent; it creates space for you to bring your own intuition and critical thinking to the table.</p>
<p>Most AI coding assistants, by contrast, erase those moments. They converge on a single, confident-sounding answer, making it harder to develop real judgment - or even to know that judgment is needed.</p>
<p>We can’t afford that. Not if we care about software quality. Not if we care about the next generation of engineers.</p>
<h2 id="rediscovering-friction">Rediscovering Friction</h2>
<p>This doesn&rsquo;t mean going back to writing everything from scratch. It means being intentional about when we <em>slow down</em>.</p>
<p>In a world where AI can generate endless code and abstractions pile up faster than ever, friction isn’t about slogging through every detail. It’s about choosing your moments. Sustainable, realistic friction is about:</p>
<ul>
<li>Getting curious when something surprises you - whether it’s a bug, an unexpected result, or a design you don’t quite trust.</li>
<li>Taking time to understand the systems or components that matter most for your product, your users, or your own growth.</li>
<li>Reflecting on failures and odd behaviours in production, and letting those drive deeper investigation.</li>
<li>Setting aside space for “digging in” on the areas that spark your curiosity, rather than feeling obligated to master everything.</li>
<li>Sharing what you learn with others - because teaching is one of the best ways to deepen your own understanding.</li>
</ul>
<p>We won&rsquo;t always have the time or energy to read every line, and that&rsquo;s okay. But if we never slow down, never question, never get our hands dirty, we risk losing the intuition that makes us truly effective engineers. Friction, when chosen wisely, is what keeps our skills sharp and our judgement real.</p>
<p>I’ve experienced this firsthand. I still remember becoming obsessed with tracking down a memory leak in production many years ago. The easy fix was already in place - just restart the IIS worker processes every night - but that was a band-aid, not a solution. So I dug in, learning to use WinDbg (a seriously tricky tool to master), poring over cryptic commands and outputs, and chasing down the root cause. It took more time and frustration than I care to admit, but by the end, I didn&rsquo;t just fix the bug - I&rsquo;d become an expert on XML Serialisation (the culprit). That experience didn&rsquo;t just give me an answer; it gave me a kind of intuition that&rsquo;s hard to get any other way.</p>
<p>And yes, maybe today you could ask an AI assistant to help diagnose a memory leak like this. Intuition, though, isn&rsquo;t just about getting the answer, it&rsquo;s about knowing <em>which questions to ask, recognising when something doesn&rsquo;t add up, and having the confidence to dig deeper when a quick fix isn&rsquo;t enough</em>. AI can accelerate learning, and it may help us reach these moments of insight faster than before, but the path taken still matters. The fundamentals - curiosity, persistence, and the willingness to wrestle with problems - are what turn information into real knowledge and meaningful understanding.</p>
<h2 id="the-missing-piece-of-the-conversation">The Missing Piece of the Conversation</h2>
<p>The Dreyfus Model shows us that growth - in any domain, but especially as software engineers - is a journey: slow, sometimes frustrating, often messy. In the age of AI, the path may look different, but the fundamentals haven&rsquo;t changed. Intuition still comes from the same place it always has: deliberate practice, reflection, and time spent wrestling with uncertainty.</p>
<p>And yet, there&rsquo;s something quietly unsettling about the way we&rsquo;re talking about AI right now.</p>
<p>We&rsquo;re told the real value in our work lies in higher-level thinking - identifying the right problems, shaping elegant solutions, seeing the system. And that&rsquo;s true. But what&rsquo;s missing from the conversation is how we can develop those skills when AI is erasing the friction that used to help us build them.</p>
<p><em>If you’re leading a team</em>, this matters even more. It’s not just about shipping faster or clearing blockers. It’s about creating the kind of environment where engineers can still build the instincts and judgment they’ll need later - even if the path to get there looks a little different now.</p>
<p>So use the tools. Embrace the speed. And every so often, slow down - just enough to feel the texture of the work again.</p>
<p>That hard-earned feeling of learning something deeply? It’s still there. And it still matters.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=You Can’t Prompt Your Way to Intuition">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>The Software Engineering Identity Crisis</title>
      <link>http://annievella.com/posts/the-software-engineering-identity-crisis/</link>
      <pubDate>Fri, 21 Mar 2025 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/the-software-engineering-identity-crisis/</guid>
      <description>
      
      
      <![CDATA[<p>Many of us became software engineers because we found our identity in building things. Not managing things. Not overseeing things. <em>Building</em> things. With our own hands, our own minds, our own code.</p>
<p>But that identity is being challenged.</p>
<p>AI coding assistants aren&rsquo;t just changing how we write software - they&rsquo;re fundamentally transforming <em>who we are</em>. We&rsquo;re shifting from creators to orchestrators, from builders to overseers. From engineers to something that looks suspiciously like&hellip; managers.</p>
<p>The irony cuts deep: for years, we&rsquo;ve said that software engineering transcends mere coding. Requirements, design, testing, operations - these were all supposedly part of our craft. Yet the industry pushed us in the opposite direction. We handed these responsibilities to specialists - Product Owners, Architects, Quality Engineers, Platform Engineers - while we doubled down on our coding expertise. We became masters of our code, proud wielders of a modern magic.</p>
<p>And now, just as we&rsquo;ve perfected this craft, AI is threatening to take it away from us.</p>
<h2 id="the-joy-were-about-to-lose">The Joy We&rsquo;re About to Lose</h2>
<p>Let&rsquo;s be honest about what&rsquo;s at stake here. Many of us don&rsquo;t just write code - we <em>love</em> writing code. Our identity is woven into every elegant solution we craft, every test we make pass, every problem we solve through pure logic and creativity. It&rsquo;s not just work, not just a craft - it&rsquo;s who we are.</p>
<p>Think about those moments of deep satisfaction: when you finally track down that elusive bug that&rsquo;s been haunting production, when you work out how to optimise that slow algorithm and watch response times drop from seconds to milliseconds, when you transform a maze of legacy code into something clean and maintainable. These aren&rsquo;t just achievements - they&rsquo;re expressions of who we are as engineers. They&rsquo;re the moments that remind us why we chose this path.</p>
<p>Now imagine AI taking over these moments of craftsmanship. The creators of these tools paint an optimistic picture - they say we&rsquo;ll spend more time on <strong>defining intent</strong>, <strong>high-level architecture</strong>, and <strong>systems thinking</strong>. But listen carefully to what they&rsquo;re really saying: we&rsquo;ll become overseers rather than creators, managers rather than builders.</p>
<figure class="center"><img src="http://annievella.com/images/thomas-dohmke-high-level-architects.png"
    alt="Are software engineers evolving into system thinkers and high-level architects?" width="70%"><figcaption>
      <p><a href="https://www.linkedin.com/posts/ashtom_how-ai-tools-are-reshaping-the-coding-workforce-activity-7303108929264275456-O5v2">Are software engineers evolving into system thinkers and high-level architects?</a></p>
    </figcaption>
</figure>

<p>This shift raises important questions about our identity as builders: Is oversight what drives us? Is it what makes us leap out of bed in the morning, eager to solve the next puzzle?</p>
<h2 id="the-identity-shift-its-already-here">The Identity Shift: It&rsquo;s Already Here</h2>
<p>This isn&rsquo;t some theoretical future we&rsquo;re debating - it&rsquo;s the reality we&rsquo;re living right now. When Google recently revealed that AI <a href="https://arstechnica.com/ai/2024/10/google-ceo-says-over-25-of-new-google-code-is-generated-by-ai/">generates more than a quarter of their new code</a>, it was just the beginning. Y Combinator CEO Garry Tan reveals that for about a quarter of their startups, <a href="https://www.cnbc.com/2025/03/15/y-combinator-startups-are-fastest-growing-in-fund-history-because-of-ai.html">95% of their code is now written by AI</a> - marking a truly significant shift. My own Master&rsquo;s research revealed a similar picture: 77% of us are spending less time writing code, and almost half believe our core skill might become secondary to prompt engineering. Think about that transition: from crafting solutions to crafting prompts.</p>
<figure class="center"><img src="http://annievella.com/images/prompt-engineering-replace-coding-skills.png"
    alt="Will Prompt Engineering Replace Traditional Coding Skills?"><figcaption>
      <p>Will Prompt Engineering Replace Traditional Coding Skills?</p>
    </figcaption>
</figure>

<p>When asked how to develop prompt engineering skills, software engineers emphasise refining communication skills. Getting an AI to do what you want means being able to articulate things well - providing just the right amount of context along with a clear description of the task. The better you can communicate with Gen AI, the more likely the output will match your expectations. Some even suggest being <em>polite</em> to these tools, treating them like team members - as if you&rsquo;re leading another human being to do something for you.</p>
<p>The changes run so deep that we&rsquo;re inventing new terms just to describe who we&rsquo;re becoming. Take <strong>vibe coding</strong>, a term that <a href="https://karpathy.ai">Andrej Karpathy</a> recently coined in a <a href="https://x.com/karpathy/status/1886192184808149383">tweet</a>. It captures a profound shift in how we write software.</p>
<p>At one end of the spectrum lies the traditional way - the craftsperson&rsquo;s way. We write each line with intent, every function name and architectural decision reflecting our deep understanding of the system.</p>
<p>At the other end? We let AI fill in the blanks, &ldquo;vibing&rdquo; with its suggestions. We focus on the what, not the how. As Karpathy puts it: <em>&ldquo;fully give in to the vibes, embrace exponentials, and forget that the code even exists.&rdquo;</em></p>
<p>That last part gives us pause - are we still engineers if we forget all about the code?</p>
<p>In a recent <a href="https://www.youtube.com/watch?v=HtqxI53h7zM">pairing session</a>, engineering thought leaders <a href="https://itrevolution.com/author/gene-kim/">Gene Kim</a> and <a href="https://steve-yegge.medium.com">Steve Yegge</a> demonstrated what this looks like in practice. Using an AI coding assistant, they ported a 3,500-line legacy Ruby script to Kotlin - a task that would normally take a week - in just one hour. The AI didn&rsquo;t just translate the code; it improved it, adding the modular architecture and unit tests they&rsquo;d wanted for years but couldn&rsquo;t justify the time for.</p>
<p>Even <a href="https://www.jedi.be">Patrick Debois</a>, the godfather of DevOps, sees this transformation reshaping our identity. In his <a href="https://ainativedev.io/news/the-4-patterns-of-ai-native-dev-overview">recent analysis of AI Native Development patterns</a>, he outlines four fundamental shifts in how we work:</p>
<figure class="center"><img src="http://annievella.com/images/patrick-debois-four-AI-native-patterns.png"
    alt="Patrick Debois: The 4 Patterns of AI Native Dev"><figcaption>
      <p><a href="https://ainativedev.io/news/the-4-patterns-of-ai-native-dev-overview">Patrick Debois: The 4 Patterns of AI Native Dev</a></p>
    </figcaption>
</figure>

<p>These patterns reveal a profound shift: we&rsquo;re moving from producers to managers of AI systems, from detailed implementation to expressing intent, from delivery to discovery through rapid experimentation, and from content creation to knowledge curation. Our role is evolving to blend creation with orchestration, building with oversight.</p>
<p>Overall, I think it&rsquo;s fair to say that the nature of our professional identity is changing at its core.</p>
<h2 id="the-craft-that-shaped-our-identity">The Craft That Shaped Our Identity</h2>
<p>To understand this identity crisis, we need to look at how deeply the craft of coding has shaped who we are. At its core, writing code is about mastery and control - skills we&rsquo;ve spent years perfecting. Modern programming languages are much higher-level than those of days gone by, but they still require deep technical understanding. Few developers today deal with the nitty-gritty of pointers and memory management, yet we still take pride in knowing how things work under the hood. Even as frameworks do more heavy lifting, we&rsquo;ve maintained our identity as artisans who understand our tools intimately.</p>
<p>Programming today is much more about stitching together APIs, frameworks, and libraries in creative ways to build something meaningful. In fact, recent research at Google suggests that <strong>creativity</strong> in software engineering centres on the concept of <a href="https://ieeexplore.ieee.org/document/10445159">clever reuse over pure novelty</a>. This makes sense to me - I&rsquo;ve often commented that we&rsquo;re all just &lsquo;integration&rsquo; engineers nowadays, really.</p>
<p>Still, there&rsquo;s a strange pride that we take in knowing all the weird syntax required to build something. It&rsquo;s like a secret language that only we understand. Becoming proficient with a programming language gives you a lot of control to make it do precisely what you want it to do. It&rsquo;s so detailed - just one wrong character will break the entire thing and it can take a lot of time and patience to make it do what you want.</p>
<blockquote class="large-quote" style="font-size: 1.5em; margin: 40px; margin-bottom: 0"> First, one must perform perfectly. The computer resembles the magic of legend in this respect, too. If one character, one pause, of the incantation is not strictly in proper form, the magic doesn’t work.</blockquote>
<p style="margin: 40px; margin-top: 10px; font-size: 0.8em;"><em>— Frederick P. Brooks, The Mythical Man-Month, Chapter 1, Addison-Wesley, 1975</em></p>
<p>The other 99% of the population thinks we&rsquo;re magicians for understanding code and indeed, it can take years of deliberate practice to master it. Those who master more than one programming language have the privilege of being referred to as <em>polyglots</em>. Many of us take great pride in writing clean, elegant code. We passionately argue over different styles and best practices, often taking it all too seriously.</p>
<h2 id="a-reluctant-managers-tale">A Reluctant Manager&rsquo;s Tale</h2>
<p>Let me share a story about identity evolution that might resonate.</p>
<p>After a decade of being an individual contributor, I hit the infamous ceiling of the technical track. <em>Senior Lead Software Engineer</em> - that was as far as the technical track went. Staff+ Engineering wasn&rsquo;t a thing yet, and the sole Architecture position at the company I was working for was filled. I faced a choice that would change who I was: stay a builder or become an overseer.</p>
<p>I chose management. Reluctantly. That&rsquo;s where the path led me. I told myself it was still engineering, just at a different level. That managing systems wasn&rsquo;t so different from managing people. That I could still keep my hands in the code in between other tasks.</p>
<p>Sound familiar? The parallels are uncanny. Just as I had to trade direct problem-solving for meetings and documentation, we&rsquo;re now being asked to trade coding for prompt engineering. The skills that defined us as engineers - mastering syntax, architecting our code elegantly, catching and handling the edge cases, debugging complex issues - are being relegated to AI. Instead, we&rsquo;re told to focus on skills that sound suspiciously like management: clear communication, systems thinking, problem definition.</p>
<p>But here&rsquo;s what no one&rsquo;s talking about: the identity crisis. That deep sense of loss when you realise you&rsquo;re no longer building things with your own hands. When your technical mastery becomes less relevant than your ability to &ldquo;manage&rdquo; the tools. When your craft becomes oversight.</p>
<p>Can orchestrating AI ever give us that same sense of identity? Of being a builder, a creator, a problem solver?</p>
<h2 id="when-machines-challenge-our-identity">When Machines Challenge Our Identity</h2>
<p>By now the source of our identity crisis becomes clear. The craft we spent years perfecting - the one that gave us purpose, meaning, and pride - is now being done faster, cheaper, and at scale by a machine. Sure, the quality isn&rsquo;t as good as your hand-written code (yet). But the speed at which code can now be written is staggering and businesses are tripping over themselves to get in on the action.</p>
<p>This is where a glimmer of hope emerges. Remember that irony - how we gave away the broader aspects of our craft to specialists? AI is pushing us to reclaim what we once knew: that software engineering transcends mere coding. That core truth remains - ultimately, software engineering is about solving problems, creating solutions, building things that matter.</p>
<p>These broader skills - what Addy Osmani calls &ldquo;durable engineering skills&rdquo; in his article on the <a href="https://addyo.substack.com/p/beyond-the-70-maximizing-the-human">human 30% of AI-assisted coding</a> - have always separated great engineers from good ones. Communication, big-picture thinking, handling ambiguity - these become even more crucial in an AI-driven world.</p>
<p>Yet this emphasis on broader skills has sparked debate in our community. For some, it sounds suspiciously like management repackaged. And they&rsquo;re not entirely wrong - a recent <a href="https://www.cio.com/article/3509174/ai-coding-assistants-wave-goodbye-to-junior-developers.html">CIO article</a> confirms that development teams are already being restructured to focus on oversight rather than creation. The article envisions future teams consisting of a product manager, a UX designer, and a software architect who primarily uses AI to generate prototypes. These architects, or senior developers, must &ldquo;understand the content&hellip; who the customer is and what we&rsquo;re trying to achieve&rdquo; - classic management responsibilities repackaged as technical work.</p>
<figure class="center"><img src="http://annievella.com/images/addy-osmani-durable-engineering-skills.png"
    alt="Management in a Cloak"><figcaption>
      <p>Management in a Cloak</p>
    </figcaption>
</figure>

<p>This evolution raises fundamental questions about our identity as engineers: As the traditional career ladder transforms, how will the next generation of software engineers develop their skills? How do we preserve the deep technical understanding and craftsmanship that shaped our profession while embracing these new tools? And perhaps most unsettling - as AI capabilities advance exponentially, will our role as craftspeople become as obsolete as the manual weaver&rsquo;s did during the Industrial Revolution?</p>
<h2 id="the-path-forward">The Path Forward</h2>
<p>Perhaps the answer lies not in resisting this transformation, but in understanding it through the lens of history. These identity crises - these fundamental shifts in how we define ourselves through our work - aren&rsquo;t new. They&rsquo;re part of a pattern that repeats whenever technology reshapes a profession.</p>
<p>During the <a href="https://www.britannica.com/story/the-rise-of-the-machines-pros-and-cons-of-the-industrial-revolution">Industrial Revolution</a>, craftspeople faced a similar crisis. Their traditional skills - honed over generations - were being replaced by machines. But what happened next is fascinating: many adapted, becoming specialist professionals who could fix and improve these same machines that threatened to replace them. Others found ways to apply their deep understanding of materials and processes to improve overall factory operations.</p>
<p>If we draw this parallel to our AI era, a similar path emerges. The core of software engineering - solving problems and creating value - remains unchanged. Our tools are evolving, and with them, the skills needed to wield them effectively.</p>
<p>The question isn&rsquo;t whether we&rsquo;ll become managers of machines - it&rsquo;s whether we can find the same satisfaction in this evolution of our craft.</p>
<h2 id="the-engineers-dilemma">The Engineer&rsquo;s Dilemma</h2>
<p>So where does this leave us? Are we all destined to become overseers of AI agents rather than writers of code? Is this a future to resist or embrace?</p>
<p>The truth, as always, is nuanced. Just as some engineers naturally gravitate toward management while others prefer to remain hands-on, we&rsquo;ll likely see a similar spectrum emerge in how we interact with AI. Some will excel at orchestrating AI systems, focusing on high-level design and making these systems more efficient and reliable - conducting a technical symphony rather than performing solo. Others will find their calling in domains where human expertise remains crucial - perhaps in security-sensitive applications, novel areas where AI lacks training data, or systems where performance and reliability are paramount. The key isn&rsquo;t to resist this evolution, but to find our place within it.</p>
<p>What&rsquo;s clear is that the definition of &ldquo;software engineer&rdquo; is expanding, not contracting. The skills that make someone valuable are diversifying. And this creates both challenges and opportunities.</p>
<p>For those who love the craft of coding, this shift can feel threatening. But remember that AI tools are still just that - tools. They don&rsquo;t understand the &ldquo;why&rdquo; behind the code, the business context, or the human needs being served. They can&rsquo;t innovate in the true sense of the word, at least not yet. And as far as we know, they can&rsquo;t <em>feel the satisfaction</em> of solving a complex problem or the joy of creating something new.</p>
<p>Perhaps the most valuable skill in this new landscape isn&rsquo;t prompt engineering or systems architecture, but <strong>adaptability</strong> - the willingness to evolve, to learn new skills, and to find your unique place in a rapidly changing field.</p>
<h2 id="the-bright-side">The Bright Side</h2>
<p>Despite these challenges, there&rsquo;s something important we need to acknowledge: these AI tools can be incredibly empowering. With agentic IDEs like <a href="https://codeium.com/windsurf">Windsurf</a> and <a href="https://www.cursor.com">Cursor</a> taking software development to a whole new level, it&rsquo;s like having a supportive pair-programming partner who&rsquo;s always there, ready to help you tackle problems that might have seemed daunting before.</p>
<p>For junior developers or those of us who might feel a bit rusty, AI assistants can be a confidence booster - helping you get started when you&rsquo;re staring at a blank file, validating your approach when you&rsquo;re unsure, or explaining complex concepts in a way that makes sense to you. For experienced developers, they&rsquo;re like having a tireless assistant who can handle the routine tasks while you focus on the more challenging aspects of the problem.</p>
<p>The speed at which we can now prototype ideas, explore different approaches, and learn new technologies is truly remarkable. What might have taken weeks of research and trial-and-error can often be accomplished in hours or even minutes. It&rsquo;s like having a superpower - the ability to amplify our capabilities and turn our ideas into reality faster than ever before.</p>
<h2 id="the-reality-check">The Reality Check</h2>
<p>But with great power comes great responsibility. A recent comprehensive <a href="https://arc.dev/talent-blog/impact-of-ai-on-code/">GitClear study</a> analysing 211 million lines of code revealed some concerning trends as AI code generation tools became more prevalent:</p>
<ul>
<li>A 17.1% increase in copy-pasted code, marking the first time AI-assisted code duplication surpassed refactored (moved) code.</li>
<li>An 8-fold rise in duplicated code blocks, with 6.66% of commits now containing repeated code sections.</li>
<li>A 26% increase in code churn, with 5.7% of all code changes being revised or deleted within two weeks.</li>
</ul>
<figure class="center"><img src="http://annievella.com/images/gitclear-2025-trends-in-code-changes.png"
    alt="GitClear: Trends in Code Changes"><figcaption>
      <p><a href="https://arc.dev/talent-blog/impact-of-ai-on-code/">GitClear: Trends in Code Changes</a></p>
    </figcaption>
</figure>

<p>While we&rsquo;re producing code faster than ever, we&rsquo;re also spending more time fixing AI-generated mistakes and dealing with code that&rsquo;s harder to maintain. This isn&rsquo;t just about speed - it&rsquo;s about the craft of writing sustainable, maintainable software.</p>
<h2 id="the-hidden-identity-crisis">The Hidden Identity Crisis</h2>
<p>Yet beneath these surface-level changes lies a deeper challenge - one that strikes at the heart of who we are as engineers. The emerging field of Human-AI teaming is revealing uncomfortable truths about our future. A <a href="https://www.sciencedirect.com/science/article/pii/S2352250X24000502">2024 study</a> shows that when humans and AI work together, the results often fall short of expectations. Not because AI lacks capability, but because trust works differently with machines than with humans.</p>
<p>We don&rsquo;t build trust with AI the way we do with human teammates.</p>
<p>With humans, trust grows gradually, through shared success. Each problem solved together strengthens the bond. Even failures can deepen trust when handled well. With AI, trust often starts high and erodes fast.</p>
<p>Every incorrect response, every hallucinated bug fix, every misplaced confidence weakens our faith in the machine. Unlike human relationships where trust typically grows over time, AI trust often peaks early and declines.</p>
<p>And when trust erodes, so does productivity.</p>
<p>The research reveals why:</p>
<ul>
<li>There&rsquo;s an inherent unpredictability in how AI interprets our intentions</li>
<li>It lacks the contextual awareness that makes human collaboration fluid</li>
<li>Its decisions often lack transparency, making it hard to rebuild trust once lost</li>
</ul>
<p>These challenges mirror what many of us experience when transitioning into technical leadership. Just as new engineering managers must learn to trust their team&rsquo;s work without doing it themselves, we now face a similar transition with AI - learning to guide and verify rather than write every line ourselves.</p>
<p>The reality is stark: despite AI&rsquo;s raw capabilities, teams often perform worse with AI than without it. Just as a team&rsquo;s productivity suffers under ineffective leadership, our effectiveness diminishes when we don&rsquo;t understand how to work with our AI tools.</p>
<h2 id="reclaiming-your-identity">Reclaiming Your Identity</h2>
<p>Drawing from both my journey as a reluctant manager and my research into this AI transformation, I see three ways we might preserve our identity as builders:</p>
<ol>
<li><strong>Resist</strong> - Some will choose to focus on domains where human creativity and deep technical expertise remain essential</li>
<li><strong>Adapt</strong> - Others will embrace AI orchestration, becoming conductors of a new kind of technical symphony</li>
<li><strong>Balance</strong> - And many, like myself, will seek a middle path - using AI for routine tasks while preserving the joy of direct problem-solving</li>
</ol>
<p>Then I had a realisation that changed my perspective: <em>We don&rsquo;t have to choose just one path</em>.</p>
<h2 id="the-identity-pendulum">The Identity Pendulum</h2>
<p>Perhaps the answer to our identity crisis lies in the <a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">Engineer/Manager pendulum</a>. My own journey between these roles taught me something crucial about identity:</p>
<ul>
<li>Management didn&rsquo;t replace my engineering identity - it expanded it</li>
<li>Returns to hands-on work weren&rsquo;t steps backward - they were identity renewals</li>
<li>The pendulum swing itself became part of who I am - adaptable, growing, evolving</li>
</ul>
<p>And that&rsquo;s when it hit me: <em>This is exactly the model we need for the AI age</em>.</p>
<p>Instead of being forced into permanent &ldquo;AI managers,&rdquo; what if we could swing between:</p>
<ul>
<li>Deep technical work where we write and refine code directly</li>
<li>Strategic orchestration where we guide AI systems</li>
<li>Creative problem-solving that combines both approaches</li>
</ul>
<p>This balanced approach resonates deeply with what I&rsquo;m hearing from fellow engineers. My research shows a clear message: maintaining strong engineering fundamentals is more crucial than ever. We need deep technical knowledge to effectively review, verify, and adjust AI-generated code - because it&rsquo;s often not quite right. When asked about their concerns with AI coding assistants, software engineers ranked code quality and security well above job security.</p>
<figure class="center"><img src="http://annievella.com/images/ai-concerns.png"
    alt="Top Concerns About AI Coding Assistants"><figcaption>
      <p>Top Concerns About AI Coding Assistants Among Software Engineers</p>
    </figcaption>
</figure>

<p>That tells me something profound: we see ourselves as guardians of engineering excellence, ensuring that AI-generated solutions adhere to solid software engineering principles. We&rsquo;re not looking to delegate our expertise to AI - we&rsquo;re evolving to apply our craft in new ways.</p>
<h2 id="your-move">Your Move</h2>
<p>As we navigate this transformation, a fundamental truth emerges: our identity crisis isn&rsquo;t really about AI at all. The research into Human-AI teaming, the parallels with management transitions, the pendulum of roles - they all point to something deeper. Beyond choosing between builder or overseer lies the heart of who we are: creators.</p>
<p>And now we come full circle: AI isn&rsquo;t taking our jobs; it&rsquo;s giving us a chance to reclaim those broader aspects of our role that we gave away to specialists. To return to a time when software engineering meant more than just writing code. When it meant understanding the whole problem space, from user needs to business impact, from system design to operational excellence.</p>
<p>The pendulum metaphor offers us wisdom here. Just as many of us have swung between engineering and management roles, we can embrace a similar fluidity with AI. Some periods we&rsquo;ll dive deep into the code, experiencing that thrill of crafting elegant solutions. Other times we&rsquo;ll step back to guide AI systems - not as overseers, but as master builders who understand every part of their craft. Like the Industrial Revolution&rsquo;s workers who became experts at optimising the machines that transformed their craft, we can master these AI systems - making them instruments of our creativity, not replacements for it.</p>
<p>In the AI era, what matters most is preserving the essence of who we are: that pure joy of building things, of solving hard problems, of making something work exactly right. Our engineering excellence runs deeper than just verifying AI&rsquo;s work - it flows from knowing systems so intimately that we can shape them, improve them, transform them.</p>
<p>The choice isn&rsquo;t whether AI will change our industry - it already is. The real choice is how we evolve with it. Will we cling to an outdated sense of what it means to be an engineer? Or will we reclaim our craft, not as mere coders, but as master builders of AI-augmented systems?</p>
<p>The pendulum is swinging - will you hold your ground, or move with it?</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=The Software Engineering Identity Crisis">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>Rediscover the Power of Simplicity</title>
      <link>http://annievella.com/posts/rediscover-the-power-of-simplicity/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/rediscover-the-power-of-simplicity/</guid>
      <description>
      
      
      <![CDATA[<p>In an era where tech stacks grow ever more complex and teams become increasingly specialised, there&rsquo;s profound wisdom to be found in looking back at simpler, more effective approaches.</p>
<p>I&rsquo;ve been meaning to write about my experience at <a href="https://www.trademe.co.nz/">Trade Me</a> for years. Earlier this week, I attended the launch of <a href="https://rowansimpson.com">Rowan Simpson</a>&rsquo;s new book, <a href="https://howtobewrongbook.com">How to Be Wrong</a>. Rowan hired me into his team at Trade Me back in 2006, and to my delight, I even earned a mention in his book! That unexpected recognition, along with recently reading <a href="https://teamtopologies.com/industry-examples/trade-me-journey-towards-a-thinnest-viable-platform">this article</a> about Trade Me&rsquo;s journey toward a &ldquo;thinnest viable platform&rdquo;, finally motivated me to reflect on what remains one of my best professional experiences to this day.</p>
<p>For those unfamiliar, Trade Me is an online marketplace - New Zealand&rsquo;s version of eBay. In the early 2000s, it was the go-to online marketplace for Kiwis, long before global platforms like Facebook Marketplace or AliExpress were established. Trade Me isn&rsquo;t just an auction site - it&rsquo;s a cornerstone of Kiwi internet culture, connecting buyers and sellers across the country and becoming an essential part of daily life for millions.</p>
<figure class="center"><img src="http://annievella.com/images/trademe-2007.png"
    alt="Trade Me in 2007 (courtesy of the [Internet Archive](https://archive.org))"><figcaption>
      <p>Trade Me in 2007 (courtesy of the <a href="https://archive.org">Internet Archive</a>)</p>
    </figcaption>
</figure>

<p>Reflecting on my time at Trade Me has me thinking about something I consider often: <strong>the power of simplicity in building effective systems and how much we can learn from those simpler times</strong>.</p>
<h3 id="the-system-that-worked">The System That Worked</h3>
<p>Despite the modest size of the company, when I worked at Trade Me in 2006-07, the platform was operating at a scale that many would find daunting even today: over 3.4 million active registered members (equivalent to 75% of New Zealand&rsquo;s population at the time) and up to 60,000 users online during peak hours. This was no small feat for the infrastructure of the time, and it was a testament to the simplicity and efficiency of the systems we built.</p>
<p>Working at Trade Me was an incredible experience. Building a web app that millions of people used daily was exhilarating. Trade Me is such a beloved and recognisable brand that wearing the company t-shirt felt like a badge of honour. It was at Trade Me that I learned how to build and ship features that customers loved, and for me, it remains one of the best, most effective examples of how to do it right. <a href="https://deming.org">W. Edwards Deming</a> would have been proud of our approach - we were like &ldquo;The Little Team That Could&rdquo; - tackling challenges with enthusiasm and a sense of fun that made even the toughest problems seem solvable when approached with the right mindset.</p>
<p>The development team was tiny - just six software engineers, supported by a handful of DBAs, sys admins, and testers - yet we delivered an astonishing amount of work with a pace and quality that feels almost mythical compared to modern standards. There was one designer and no formal product management layer - ideas and direction came straight from <a href="https://en.wikipedia.org/wiki/Sam_Morgan_(entrepreneur)">Sam Morgan</a> (the founder and CEO), Jessi Morgan and Rowan Simpson, flowing directly to those building the features.</p>
<p>We didn&rsquo;t have the sophisticated tools or complex architectures we see today. There was no Jira, no CI/CD pipelines as we know them now, no automated testing, no cloud services, and no microservices. Trade Me was a monolithic web app written in ASP. We were migrating it to ASP.NET gradually - every page we touched had to be split into frontend and code-behind files. Deployments were automated through a custom tool: zip up the application, copy it to load-balanced web servers, unzip it, and restart IIS app pools. And yet, despite - or perhaps because of - this simplicity, we deployed to production <strong>twice daily</strong> (except for Friday afternoons which were reserved for socialising) with very few exceptions or incidents.</p>
<p>Looking back, I believe that success was driven by the &ldquo;system&rdquo; of how we worked. The team structures, culture, and decision-making processes were all incredibly well-aligned. This alignment also influenced the technical architecture, which was simple, efficient, and easy to maintain. The simple monolithic architecture, that powered a web app used by 75% of New Zealand&rsquo;s population, was a direct result of our organisational structure and the way we worked, not the other way around.</p>
<h3 id="conways-law-and-our-bias-for-addition">Conway&rsquo;s Law and Our Bias for Addition</h3>
<p>Look at any modern tech organisation chart and you&rsquo;ll see a dizzying array of specialised roles: Frontend Engineers, Backend Engineers, Fullstack Engineers, Mobile Engineers, <em>Product Engineers</em>, DevOps Engineers, Site Reliability Engineers, Platform Engineers, Data Engineers, Quality Engineers, Business Analysts, Product Owners, Scrum Masters, Agile Coaches, Delivery Leads&hellip; the list goes on. Now look at their <strong>system architecture diagrams</strong> - they&rsquo;re often just as complex.</p>
<p>This isn&rsquo;t a coincidence. <a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway&rsquo;s Law</a> tells us that <em>organisations design systems that mirror their communication structures</em>. At Trade Me, the simplicity of our organisational structure directly influenced the simplicity of our software systems. With just six engineers, a few DBAs, sys admins and testers, and one designer, our communication paths were clear and direct, and the systems we built were just as straightforward.</p>
<p>Today, we often justify our complex organisational structures as necessary for &ldquo;scaling&rdquo; or &ldquo;specialisation&rdquo;. But what if we&rsquo;re getting it backwards? What if our <strong>complex systems are a result of our complex organisations</strong>, rather than the other way around?</p>
<p>There&rsquo;s another factor at play here: <strong>our brains are wired to solve problems by adding, not subtracting</strong>.</p>
<p>A <a href="https://www.sciencealert.com/here-s-why-our-brains-always-want-to-solve-problems-by-adding-not-taking-away">study of 1,585 people</a> found that humans default to addition when addressing challenges, often without even considering subtraction. This cognitive bias manifests in countless ways: more meetings, more tools, more processes, more people, more systems, more code. It&rsquo;s no surprise that over time, our software systems have become increasingly complex - layer upon layer added in the pursuit of better outcomes.</p>
<p>At Trade Me, we didn’t have the luxury of adding endlessly. Limited resources and small team sizes forced us to think differently, often leading to pragmatic and simple yet elegant solutions. By keeping the system simple, we avoided the pitfalls of “more is better” thinking and achieved results that, ironically, were better because they were simpler.</p>
<h3 id="what-made-it-work">What Made It Work?</h3>
<p>So, what about the &ldquo;system&rdquo; at Trade Me made it so successful? Here are a few observations:</p>
<ul>
<li>
<p><strong>Clear Ownership and Accountability</strong> - Each project was run by a small, cross-functional team with clear responsibilities. Each software engineer was given an opportunity to lead a project, regardless of their seniority. They got to choose their teams, and were trusted to deliver. This trust fostered ownership, pride, and accountability, and allowed us to experience what it meant to lead a software team (which I think is <em>really important</em> but a topic for another post). Much of this culture was driven by leaders like Rowan, whose vision and focus on getting the fundamentals right played a big part in creating an environment where simplicity thrived.</p>
</li>
<li>
<p><strong>Small, Focused Teams</strong> - Projects were staffed with just enough people - a couple of software engineers, a DBA, a sys admin if needed, and a tester. The small size forced focus and collaboration, and the simplicity of the structure kept communication overhead low.</p>
</li>
<li>
<p><strong>Pragmatism Over Perfection</strong> - We delivered value quickly and iterated as needed, avoiding over-engineering and staying focused on what truly mattered.</p>
</li>
<li>
<p><strong>Continuous Deployment Culture</strong> - Deploying to production twice daily created a feedback loop that allowed us to learn and adjust rapidly. It was an early version of the DevOps as we know it today, and it worked because we kept it simple.</p>
</li>
<li>
<p><strong>Direct Customer Insight</strong> - Many of our testers had come from customer support roles and deeply understood the end users. This close connection to the end user meant that what we built was always grounded in real needs.</p>
</li>
</ul>
<h3 id="what-can-we-learn-today">What Can We Learn Today?</h3>
<p>The Trade Me of the mid-2000s thrived on simplicity, pragmatism, and alignment. Today, we’re surrounded by tools, frameworks, and architectural patterns that promise to make our work easier, but instead, they often add complexity. So how can we apply the lessons of Trade Me to modern software development?</p>
<ul>
<li>
<p><strong>Focus on the System, Not Just the Tools</strong> - Fancy tools and microservices won&rsquo;t save you if your organisational system is broken. Start by defining a clear purpose and aligning teams, roles, and communication structures.</p>
</li>
<li>
<p><strong>Embrace Simplicity</strong> - Keep simplicity at the heart of your decision-making. Sometimes, the simplest solution is the best one - not every problem requires a new complex process, framework or tool. Ask yourself, &ldquo;What is the simplest way to achieve the desired outcome without adding unnecessary overhead?&rdquo;. Simplicity and pragmatism ensures your systems remain efficient, understandable, and maintainable over time.</p>
</li>
<li>
<p><strong>Enable Small, Cross-Functional Teams</strong> - Small teams with end-to-end ownership are still the best way to build software. Ensure they have the right capabilities and context, then empower them with agency and accountability. Crucially, ensure that software engineers are not just participants but <em>leaders in this process</em>. They are the ones with the technical expertise to make informed decisions on how to build the thing so their perspective matters, a lot.</p>
</li>
<li>
<p><strong>Streamline Feedback Loops</strong> - Shorten the time between idea and delivery. Whether it&rsquo;s through CI/CD or daily deployments, keep your deployments small and often. Address small issues before they become big ones.</p>
</li>
<li>
<p><strong>Bring Back the Generalist</strong> - As specialisation increases, we lose the magic of software engineers who can see and build the whole picture. Let&rsquo;s rediscover the value of being a &ldquo;full-stack&rdquo; team member. The rise of AI tools could really help here, making it easier for engineers to learn how to work effectively across different technologies and domains.</p>
</li>
</ul>
<p><strong>This last point is particularly relevant in our AI-driven future.</strong> While AI coding assistants are making it easier than ever to generate specialised code, they&rsquo;re simultaneously lowering the barriers to becoming a true generalist. With AI handling the syntax and implementation details, engineers can focus more on the holistic understanding of systems and user needs – precisely the kind of thinking that made Trade Me so successful.</p>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>Trade Me&rsquo;s approach to building software in the mid-2000s was remarkable because it was so simple and it worked so well. Our little team accomplished things that seemed impossible given our size, proving that with the right approach, small teams can achieve outsized results. Our <em>system</em> was capable of achieving incredible outcomes. By understanding the system as a whole and keeping things simple, we delivered exceptional quality with minimal resources.</p>
<p>Today, as we navigate ever-growing complexity in software development, perhaps it&rsquo;s time to revisit those principles. Let&rsquo;s simplify. Let&rsquo;s align. Let&rsquo;s recapture that spirit of small teams doing big things. Let&rsquo;s build systems that enable us to do our best work, not just add layers of abstraction.</p>
<p>The question I leave you with is this: <strong>What would happen if you thoughtfully simplified the unnecessary complexity in your organisation and systems?</strong> What if, instead of adding more specialists, more processes, more tools, you focused on building a simpler, more aligned system where small teams could thrive? The results might surprise you.</p>
<p>The tools have changed, but the principles remain timeless. <strong>It&rsquo;s time to rediscover the power of simplicity</strong>.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=Rediscover the Power of Simplicity">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>The SDLC Strikes Back: Adapting to AI-Driven Development</title>
      <link>http://annievella.com/posts/the-sdlc-strikes-back/</link>
      <pubDate>Fri, 07 Feb 2025 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/the-sdlc-strikes-back/</guid>
      <description>
      
      
      <![CDATA[<p>Earlier this year, <a href="https://lovable.dev">Lovable</a> celebrated their biggest milestone yet - more than 12,000 (!) new projects created in a single day. The very next day, they went down. The irony? Their success became their downfall. Each new project in Lovable requires a new GitHub repository, and this surge - thousands per day - put such strain on GitHub&rsquo;s infrastructure that it risked affecting GitHub&rsquo;s entire platform. Their on-call engineer had to make the difficult decision to suspend Lovable&rsquo;s account, effectively blocking all users from creating or editing their projects.</p>
<figure class="center"><img src="http://annievella.com/images/lovable-github-incident.png"
    alt="Lovable Dev GitHub Incident" width="75%"><figcaption>
      <p><a href="https://x.com/antonosika/status/1876342499620667511">Anton Osika - Lovable Dev GitHub Incident</a></p>
    </figcaption>
</figure>

<p>This incident perfectly illustrates a fundamental principle of systems thinking: when you push hard on one part of a complex system, it pushes back in unexpected ways. <a href="https://en.wikipedia.org/wiki/Peter_Senge">Peter Senge</a> captured this insight in <a href="https://en.wikipedia.org/wiki/The_Fifth_Discipline">The Fifth Discipline</a> as one of his laws of systems thinking: <strong>the harder you push, the harder the system pushes back</strong>.</p>
<p>The Software Development Lifecycle (SDLC) is one such complex system, and right now, we&rsquo;re pushing on it harder than ever before. If you&rsquo;re working with AI tools, you&rsquo;ve probably experienced this yourself - code that used to take hours or days to write is now generated in seconds. &ldquo;The code just writes itself now!&rdquo; has become a common refrain in development circles. And while it&rsquo;s not entirely wrong, it&rsquo;s making us face some fascinating challenges.</p>
<p>What happens when code generation is no longer the bottleneck? Here&rsquo;s what you&rsquo;ll start seeing: larger PRs piling up in review queues, test suites taking longer to run, and deployments struggling to keep up. As we accelerate one part of the development cycle, the system inevitably responds in ways that demand our attention - and you&rsquo;ll need to be ready.</p>
<h2 id="pipeline-pressure-points">Pipeline Pressure Points</h2>
<p>As we accelerate code generation with AI, we&rsquo;re seeing the system push back at both ends of our development pipeline - both before and after the actual build phase.</p>
<h3 id="ux-the-pre-build-bottleneck">UX: The Pre-Build Bottleneck</h3>
<p>Software development has always been constrained by implementation speed. Even at the 1968 conference where the term &ldquo;Software Engineering&rdquo; was coined, the word &ldquo;cost&rdquo; appears <strong>96 times</strong> <a href="https://www.scrummanager.com/files/nato1968e.pdf">throughout the report</a> - and they weren&rsquo;t just talking about hardware. Despite decades of new methodologies, frameworks, and automation tools, writing code has remained stubbornly time-consuming.</p>
<p>But AI coding assistants are changing this equation dramatically. Tasks that used to take days - like scaffolding new APIs, building authentication systems or perfecting UI layouts - now take hours or minutes. The implementation speed that has bottlenecked our industry for decades is suddenly dramatically increasing.</p>
<p>And that&rsquo;s when a new challenge emerges. I recently came across this <a href="https://www.reddit.com/r/ChatGPTCoding/comments/1h26x0k/team_transitioned_to_cursor_but_bottleneck_is_now/">Reddit post</a> that hints at what&rsquo;s coming:</p>
<figure class="center"><img src="http://annievella.com/images/cursor-speed-ux-bottleneck.png"
    alt="Reddit post - Team transitioned to Cursor but bottleneck is now UX"><figcaption>
      <p><a href="https://www.reddit.com/r/ChatGPTCoding/comments/1h26x0k/team_transitioned_to_cursor_but_bottleneck_is_now/">Reddit post - Team transitioned to Cursor but bottleneck is now UX</a></p>
    </figcaption>
</figure>

<p>While most teams are still focused on adopting AI for faster code generation, some early adopters are already hitting a different wall: they can implement features faster than they can design them. The bottleneck is shifting from implementation to conception - from <em>how</em> to build it to <em>what</em> to build.</p>
<p>This is systems thinking in action - as we optimise one part of the pipeline, we&rsquo;re exposing constraints elsewhere. Soon, our biggest challenge won&rsquo;t be writing code, but rather understanding user needs, designing intuitive interfaces, and crafting requirements that actually solve real problems. We&rsquo;re going to need new ways to accelerate these early stages of development to keep pace with our AI-enhanced implementation capabilities.</p>
<h3 id="the-speed-wobbles-post-build-challenges">The Speed Wobbles: Post-Build Challenges</h3>
<p>Remember learning to ride a bike? There&rsquo;s that terrifying moment when you&rsquo;re going so fast that the handlebars start to shake. You&rsquo;re not doing anything wrong - you&rsquo;ve just hit that speed where everything starts to wobble. That&rsquo;s exactly what&rsquo;s happening in our development pipelines.</p>
<p>The ripple effects of accelerated code generation are showing up in unexpected places. As mentioned in a <a href="https://annievella.com/posts/what-its-really-like-using-an-ai-coding-assistant/">previous post</a>, the <a href="https://dora.dev/research/2024/dora-report/">2024 DORA Report</a> revealed a fascinating paradox: while AI tools are improving many of the things we typically associate with better delivery - documentation quality, code quality, code review speed, and reduced complexity - the industry is actually seeing a decline in overall delivery performance.</p>
<p>This highlights another key principle of systems thinking: improving individual components doesn&rsquo;t necessarily improve the system as a whole. In fact, it can make things worse if those improvements aren&rsquo;t balanced across the entire pipeline. The DORA findings suggest that our development processes, built and optimised over decades for human-speed code generation, need fundamental rethinking to handle the velocity that AI enables.</p>
<h2 id="adapting-to-ai-driven-development">Adapting to AI-Driven Development</h2>
<p>As these pressure points emerge, we&rsquo;re seeing new tools and practices evolve to help us adapt. These adaptations focus on two key areas: how we provide context to our AI tools, and how we think about our source artifacts themselves.</p>
<h3 id="the-importance-of-context">The Importance of Context</h3>
<p>Here&rsquo;s a scenario every developer knows too well: you&rsquo;re working with a new teammate, and they ask you how to use the company&rsquo;s internal authentication library. You point them to the documentation, only to realise it&rsquo;s woefully outdated. So you spend the next hour walking them through the codebase, explaining the patterns, the gotchas, and trying to recall why certain decisions were made.</p>
<p>Now imagine having this same conversation with an AI coding assistant. Without proper context, it&rsquo;s just as lost as that new teammate. Sure, it can write decent code from simple prompts, but ask it to work with your custom libraries or follow your team&rsquo;s patterns that it can&rsquo;t possibly know anything about, and it&rsquo;s flying blind.</p>
<p>This is why we&rsquo;re seeing tools like <a href="https://llmcontext.com">LLMContext.com</a> and <a href="https://www.uithub.com">Uithub.com</a> emerge. These tools create rich, interpretable context files from your entire development ecosystem. Not just source code, but documentation in various formats - from Markdown files to PDFs, and even content from images and other media (thanks to Microsoft&rsquo;s <a href="https://github.com/microsoft/markitdown">MarkItDown</a> tool).</p>
<p>It&rsquo;s like giving your AI assistant the equivalent of that hour-long walkthrough. Now when you ask it to add a feature using your authentication library, it understands the patterns, the constraints, and the team conventions. The code it generates isn&rsquo;t just syntactically correct - it feels like it was written by someone who actually knows your codebase.</p>
<p>This emerging need for rich, well-structured context is yet another way the SDLC is pushing back. As our AI tools get better at writing code, we need better ways to help them understand <em>our</em> code.</p>
<h3 id="are-specs-and-prompts-our-new-source-code">Are Specs and Prompts our New Source Code?</h3>
<p>Perhaps the most fundamental adaptation is in how we think about source code itself. When we were writing code by hand (wow, that feels weird to say), the most important thing to store safely was the source code. It&rsquo;s in the name - <em>source</em>. From that, you should be able to derive everything else you need to know about how the system ought to operate.</p>
<p>The reality is that we&rsquo;re not writing all the code by hand anymore. Instead, we&rsquo;re writing specifications and prompts for AI coding assistants to <em>generate</em> code for us. And this raises an important question: if all you&rsquo;re storing is the generated output of the LLMs, isn&rsquo;t that almost the equivalent of only storing compiled code (bytecode, IL, binaries) instead of the source code?</p>
<p>We&rsquo;re not in entirely new territory here. Test-Driven Development (TDD) and Behaviour-Driven Development (BDD) have long emphasized the importance of capturing the <em>intent</em> behind our code - TDD through tests, BDD through behaviour specifications. Both approaches ensure we&rsquo;re clear about what we want before we build it. The same principle applies here - without capturing our intent, we&rsquo;re just hoping the implementation does what we think it was intended to do.</p>
<p>The rise of AI-generated code raises interesting questions about code understanding. As AI generates more of our code, some worry we&rsquo;ll lose our grasp on how it all works. But maybe that&rsquo;s looking at it wrong - if we can capture and validate our intent clearly enough, debugging might become less about understanding the implementation and more about refining the specification. Think of it as hitting replay with a slightly modified script.</p>
<p>Following this line of thinking to its natural conclusion - if prompts and specifications are becoming our new source code, shouldn&rsquo;t we treat them with the same care and organisation? Just as we&rsquo;ve developed sophisticated ways to store, manage and share code, we need new tools and practices for managing our AI interactions. Here are three ideas that are already starting to emerge:</p>
<h3 id="1-prompt-libraries">1. Prompt Libraries</h3>
<p>Remember when we used to stash away useful code snippets? Those bits of tried-and-tested code that we&rsquo;d copy-paste into new projects? For me it was SQL - I couldn&rsquo;t help but keep almost every piece of SQL I ever wrote in a folder because you just never knew when it was going to come in handy again!</p>
<p>Well, welcome to the AI era&rsquo;s equivalent: <strong>Prompt Libraries</strong>. Instead of storing code in repos, we&rsquo;re now starting to store and share the prompts that consistently generate good outputs. We&rsquo;re already seeing this materialize in practice - a recent <a href="https://dev.to/portkey/three-prompt-libraries-you-should-know-as-a-ai-engineer-32m8">article on dev.to</a> highlights several emerging prompt libraries that are bringing engineering rigor to prompt creation and management.</p>
<p>Imagine having a library of prompts that you know will generate a solid REST API endpoint, complete with error handling and input validation. Or prompts that reliably create accessible React components following your team&rsquo;s conventions. These proven prompts deliver predictable, high-quality results, just like the code libraries we&rsquo;ve always relied on. We&rsquo;re moving from sharing snippets on GitHub Gists to building entire ecosystems for testing, sharing, and versioning our most effective prompts.</p>
<p>This shift isn&rsquo;t just about storing prompts - it&rsquo;s about the emergence of prompt engineering as a crucial skill. My recent research revealed that 56% of software engineers see prompt engineering as highly important for their future role, while only 21% consider it unimportant.</p>
<figure class="center"><img src="http://annievella.com/images/importance_of_prompt_engineering.png"
    alt="Graph showing that over half of surveyed software engineers consider prompt engineering to be extremely or very important for their future role"><figcaption>
      <p>Future of Prompt Engineering</br>Over half of surveyed software engineers consider prompt engineering to be extremely or very important for their future role</p>
    </figcaption>
</figure>

<h3 id="2-intent-records-and-templates">2. Intent Records and Templates</h3>
<p>Here&rsquo;s another idea worth exploring: as AI increasingly generates our code, we need better ways to capture the reasoning behind implementation choices. I&rsquo;m imagining something that I&rsquo;m calling  <strong>Intent Records</strong> - think of them like Architecture Decision Records (ADRs) but specifically designed for AI generation, capturing both what to build and why to build it that way.</p>
<p>An Intent Record could specify something like: &ldquo;We need a caching layer that prioritises read speed over write speed because our analytics dashboard needs to handle 10,000 concurrent users viewing real-time data&rdquo;. To standardise these records, we could develop <strong>Intent Templates</strong> - similar to how Detailed Design Documents (DDDs) structure their content - ensuring teams capture all necessary requirements, constraints, assumptions and design decisions that guide AI code generation.</p>
<h3 id="3-spec-modules">3. Spec Modules</h3>
<p>Building on this concept of structured documentation, here&rsquo;s another idea to consider: what if we had reusable building blocks for creating AI-ready specifications? We could call them <strong>Spec Modules</strong> - pre-built specification components that describe in detail specific types of functionality. Need authentication? You&rsquo;d grab a spec module that defines the security requirements, API endpoints, and user flows. Want a shopping cart? There&rsquo;d be a module ready to customise with your specific business rules.</p>
<p>By breaking down specifications into these AI-friendly modules, you wouldn&rsquo;t just be making your work more efficient - you&rsquo;d be creating a new kind of component library. One that exists at a higher level than traditional code libraries, providing AI systems with clear, consistent instructions for generating reliable, production-ready code.</p>
<h2 id="rethinking-the-sdlc-ai-is-pushing-back">Rethinking the SDLC: AI is Pushing Back</h2>
<p>For as long as software engineering has existed, we&rsquo;ve been searching for ways to build better software with less pain. Faster builds, simpler deployments, shorter feedback loops. Every new methodology, every new tool, every process improvement - it&rsquo;s all been about reducing friction and cognitive load in the development pipeline.</p>
<p>And now, AI coding assistants have done something remarkable. They’ve removed one of our longest-standing bottlenecks: the speed of writing code. It’s no longer a question of how fast we can build something - it’s a question of whether we can keep up with what we’re creating.</p>
<p>But software development isn’t just about writing code. It never was. The real work happens before the first line is written and long after the last commit. And now that we’ve uncapped code generation speed, we’re seeing pressure shift to everything around it - design, testing, review, deployment. The SDLC is pushing back.</p>
<p>In <a href="https://dl.acm.org/doi/10.1145/3715003">The Future of AI-Driven Software Engineering (Terragni et al., 2025)</a>, we explored where this shift is leading us. AI isn&rsquo;t just accelerating development - it&rsquo;s reshaping the way we build software altogether. Requirements need to be clearer. Design decisions and intent need to be explicit and recorded. Testing and validation need to scale. Our workflows, our tools, even our mental models of software engineering are being rewritten in real time. Our research suggests that AI itself might help address these emerging needs - from requirements analysis through to testing and deployment - though with varying levels of maturity across different stages of the lifecycle.</p>
<p>The implications are profound. <strong>The teams that understand and adapt to these system pressures now will be the ones that thrive in the AI era</strong>. As AI reshapes software development, it&rsquo;s not just changing our tools - it&rsquo;s transforming how we think about the entire discipline. The engineers who thrive in this new era will be those who excel at shaping intent, thinking in systems, and designing solutions that leverage both human insight and AI capabilities to build better software in ways we&rsquo;re only beginning to imagine.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=The SDLC Strikes Back: Adapting to AI-Driven Development">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>What It&#39;s Really Like Using an AI Coding Assistant</title>
      <link>http://annievella.com/posts/what-its-really-like-using-an-ai-coding-assistant/</link>
      <pubDate>Sat, 25 Jan 2025 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/what-its-really-like-using-an-ai-coding-assistant/</guid>
      <description>
      
      
      <![CDATA[<p>I&rsquo;ve now spent a couple of months using <a href="https://codeium.com/windsurf">Windsurf</a> fairly regularly and I thought I&rsquo;d share some of my experiences with it.</p>
<p>To set the scene, I&rsquo;m a software engineer with over 20 years experience. I have a degree in Computer Science and Math and spent the first half of my career in hands-on individual contributor roles across 7 industries and 4 countries. I would generally describe myself as a C# .NET backend dev but I&rsquo;ve built my fair share of frontends and even some mobile apps. I&rsquo;ve hopped back and forth between management and engineering roles over the last decade. I haven&rsquo;t written code as part of my day job for about 5 years now. I still enjoy building software myself and have plenty of grand ideas that I&rsquo;d love to bring to life, but sadly it just takes too long.</p>
<p>I&rsquo;ve been using Windsurf to help me write R and Python scripts for my research. Besides that, I&rsquo;ve been tinkering with agentic AI frameworks like <a href="https://crew.ai/">CrewAI</a> (more Python), a couple of small web-based games (JavaScript) and experimented building mobile apps (React Native). These experiences have taught me a lot about working with AI coding assistants.</p>
<p>Before I dive into my specific experiences, it&rsquo;s worth noting that as with any new technology, it takes time to learn how to use it well. There&rsquo;s simply nothing as effective as real hands-on experience and deliberate practice to build skills. Learning how to collaborate with an AI coding assistant is no different. In fact, initial insights from my Master&rsquo;s research shows that there is a strong correlation between frequency of use and developer productivity, with daily users reporting significantly higher productivity than infrequent users.</p>
<figure class="center"><img src="http://annievella.com/images/productivity_by_frequency.png"
    alt="Graph showing the relationship between AI coding assistant usage frequency and developer productivity. Daily users report significantly higher productivity gains compared to occasional users."><figcaption>
      <p>Productivity by Frequency of Use</br>Daily users report significantly higher productivity gains compared to occasional users.</p>
    </figcaption>
</figure>

<p>With that in mind, let me share what I&rsquo;ve discovered about these tools - both the parts that have delighted me and the parts that have occasionally frustrated me. My experience aligns well with what other developers have reported: there&rsquo;s a lot to love, but also some important quirks to be aware of.</p>
<h3 id="the-good-parts">The Good Parts</h3>
<h4 id="its-like-a-fabulously-helpful-pair-programmer">It&rsquo;s like a fabulously helpful pair programmer</h4>
<p>Using Windsurf really does feel like you have an endlessly patient and supportive pair programmer by your side. Interactions feel natural, like you&rsquo;re actually collaborating on a piece of work with another human being. It helps you think through problems, suggests improvements, and catch potential issues before they become bugs.</p>
<h4 id="its-great-at-automating-away-toil-and-repetitive-tasks">It&rsquo;s great at automating away toil and repetitive tasks</h4>
<p>Have you ever had to go through and tediously update heaps of files or strings just for consistency&rsquo;s sake? Sometimes you can get away with a simple find + replace, but sometimes that just doesn&rsquo;t cut it. Windsurf can pick up on these sorts of patterns and rip through them automatically, systematically updating every occurrence in a file or string. This can save you a lot of time!</p>
<p>I should mention that sometimes it doesn&rsquo;t pick up on all the instances, so it&rsquo;s a good idea to double check its work - but it certainly takes most of the grunt work away from you.</p>
<h4 id="it-can-run-scripts-see-the-results-and-react-autonomously">It can run scripts, see the results and react autonomously</h4>
<p>When using Windsurf&rsquo;s Cascade feature in &lsquo;Write&rsquo; mode, it will not only create and edit source code, but it will also offer to run it for you. You can configure it to run certain commands automatically, but otherwise it will just pause and ask for your confirmation. If you let it run your script, it will see any output or logs that would&rsquo;ve been piped out to the terminal. If there are any errors in that output, it will automatically attempt to fix them. If not, it may try to summarise what it saw and provide insights or suggestions.</p>
<p>You see what I mean when I say it&rsquo;s like having a fantastic pair programmer by your side?</p>
<h4 id="its-great-for-prototyping-and-experimenting-with-unfamiliar-languages">It&rsquo;s great for prototyping and experimenting with unfamiliar languages</h4>
<p>As I mentioned earlier, I&rsquo;ve been using Windsurf to help me write R and Python scripts - languages that I&rsquo;ve barely ever used before. In the past, I didn&rsquo;t steer clear of trying new technologies, but it would just take me a long time to get anything done. Windsurf has made it so much easier to prototype and experiment with code, supporting you in a way that reduces cognitive load and gives you a sense of confidence.</p>
<p>However, this ease of use comes with an important caveat: you still need a solid foundation in programming concepts. These tools are incredibly powerful, but they&rsquo;re more like highly capable assistants that help you implement your ideas, rather than complete replacements for programming knowledge. They can help you learn a new language&rsquo;s syntax or framework&rsquo;s API, but they can&rsquo;t teach you fundamental programming principles from scratch.</p>
<p>This leads to an interesting challenge: while these tools make it easier to try new things, it&rsquo;s hard to gauge how much you&rsquo;re actually learning. I can write R and Python code much faster now, but I&rsquo;m not sure I could write particularly good code in either language without continued AI assistance. It&rsquo;s a bit like having training wheels that you&rsquo;re not sure you should take off.</p>
<p>This is exactly what Addy Osmani describes in his article about the &ldquo;<a href="https://addyo.substack.com/p/the-70-problem-hard-truths-about">70% problem</a>&rdquo;. The initial progress feels almost like magic - you&rsquo;re writing code in languages you barely know! But then reality kicks in: without underlying experience and expertise, you may find yourself stuck at that 70% mark, unable to tackle the more complex challenges that require deeper understanding.</p>
<h3 id="the-annoying-parts">The Annoying Parts</h3>
<h4 id="it-can-get-stuck-in-an-endless-loop-of-incorrect-suggestions">It can get stuck in an endless loop of incorrect suggestions</h4>
<p>Sometimes you&rsquo;ll ask it to write some code and it won&rsquo;t get it right. Then you&rsquo;ll tell it that that didn&rsquo;t work and it will try something else, which also doesn&rsquo;t work. This back and forth can go on for a while, and often it can lead you right back to the original incorrect suggestion. As you can imagine, this can get quite frustrating!</p>
<p>Since Windsurf has this agentic nature, it can also end up in this sort of loop itself - recognising that it&rsquo;s made a mistake and trying to fix it repeatedly. The biggest downside of this is that it can end up making a lot of unnecessary changes to your code which you then need to try and unpick.</p>
<p>My advice here is to recognise when it&rsquo;s going down these sorts of rabbit holes and asking it to stop, undo all the changes it&rsquo;s made, go back to the start of the task, take the time to think about the problem, use chain-of-thought reasoning, make plan and start again. It can also help to tell it to make the least amount of change possible. This is often enough to help it find a better solution quicker.</p>
<h4 id="its-not-great-with-transitive-relationships-in-scripts">It&rsquo;s not great with transitive relationships in scripts</h4>
<p>I&rsquo;m not sure if it&rsquo;s the way I&rsquo;m structuring my R scripts or a limitation of the tool, but say I&rsquo;ve got an R script (analysis.R) which loads another (setup.R), which in turn loads another (helper.R). I expect Windsurf to know that it can access and should use functions defined in helper.R from analysis.R, but it often doesn&rsquo;t and instead creates new functions directly in analysis.R. I have to keep reminding it to reuse the functions defined in helper.R.</p>
<h3 id="the-surprising-parts">The Surprising Parts</h3>
<h4 id="it-makes-mistakes-but-knows-it-too">It makes mistakes, but knows it too</h4>
<p>Like humans, it makes mistakes. However, every now and then you see evidence of the underlying agentic nature of Windsurf kicking in. It will make some changes, realise that it&rsquo;s made a mistake, and fix it all by itself. This is probably one of the most impressive things I&rsquo;ve seen it do.</p>
<h4 id="it-doesnt-question-you-and-takes-most-of-your-suggestions-seriously-even-when-it-was-right">It doesn&rsquo;t question you and takes (most of) your suggestions seriously, even when it was right</h4>
<p>I&rsquo;ve noticed that it will generally trust you even when you&rsquo;re wrong. For example, if it suggests some code and you ask whether that is the most efficient way to do it, even if you know that it is, it will second-guess itself and suggest a different, less efficient approach instead.</p>
<p>What I tend to do is when I ask it a question like <em>&ldquo;is this really the best way to do this?&rdquo;</em> is add <em>&ldquo;challenge me if you disagree&rdquo;</em>. This seems to help it assess my question more freely, rather than just agreeing with me and finding another potentially less ideal because I dared ask.</p>
<h4 id="the-model-youre-using-really-matters">The model you&rsquo;re using really matters</h4>
<p>Windsurf allows you to choose between three models: GPT 4o, Claude 3.5 Sonnet and Cascade Base. I&rsquo;ve tried GPT 4o and Claude 3.5 Sonnet primarily, and I&rsquo;ve got to say that Claude 3.5 Sonnet beats GPT 4o for the sort of coding tasks I&rsquo;ve been using it for, hands down. Interestingly, I&rsquo;m a huge fan of GPT 4o via ChatGPT for everyday tasks, but for coding, Claude 3.5 Sonnet is my go-to choice now.</p>
<h4 id="if-you-want-structured-outputs-give-it-structured-prompts">If you want structured outputs, give it structured prompts</h4>
<p>Think of using these tools like talking to another developer, perhaps someone early on in their career. If you give them vague requirements, chances are that what they&rsquo;ll build won&rsquo;t be quite what you were after. If you give them clear and concise specifications, there&rsquo;s a better chance of getting what you want.</p>
<p>The same thing applies when using AI coding assistants. The more specific you can be, the more likely the outcome will match your expectations.</p>
<h4 id="keep-changesets-small-and-commit-often---source-control-is-your-friend">Keep changesets small and commit often - source control is your friend</h4>
<p>Keeping changes small and focused is a fundamental best practice in software development, regardless of your tools. However, it becomes even more critical when using AI coding assistants because they can generate code so quickly that you&rsquo;ll have hundreds of changes before you realize it. The larger the changeset, the harder it is to spot mistakes and the more time-consuming the review process becomes.</p>
<p>I&rsquo;m not alone in noticing this challenge. The <a href="https://dora.dev/research/2024/dora-report/">2024 DORA Report</a> found that AI adoption is actually negatively impacting software delivery performance, contrary to what many expected. Their research suggests that the dramatic increase in productivity and code generation speed is leading to larger changesets, contradicting DORA&rsquo;s principle of small batch sizes which are essential for stability.</p>
<figure class="center"><img src="http://annievella.com/images/dora-negative-impact-on-delivery-throughput-and-stability.png"
    alt="Graph from the 2024 DORA Report showing how AI adoption is correlating with decreased software delivery throughput and stability metrics"><figcaption>
      <p><a href="https://dora.dev/research/2024/dora-report/">2024 DORA Report Finding</a></br>AI adoption appears to be negatively impacting software delivery throughput and stability</p>
    </figcaption>
</figure>

<h3 id="so-what-does-the-future-hold">So what does the future hold?</h3>
<p>Research clearly shows that AI coding assistants boost developer productivity, but their impact goes far beyond simple efficiency gains. These tools are enabling a renaissance in personal software development. By handling routine tasks and reducing the cognitive load of working with unfamiliar technologies, they free us up to focus on what truly matters - creating innovative software that delights users and makes us proud.</p>
<figure class="center"><img src="http://annievella.com/images/windsurf-public-profile-jan-2025.png"
    alt="Screenshot of my public Windsurf profile showing statistics about my coding activity and language usage over the past two months"><figcaption>
      <p><a href="https://codeium.com/profile/codefrenzy">My Windsurf Profile</a></br>Statistics from two months of AI-assisted development</p>
    </figcaption>
</figure>

<p>To be honest, it&rsquo;s been a while since I spent so much time coding. Not for a lack of ideas - I&rsquo;ve got plenty of those - but for lack of time. Building anything useful takes time, precious time. But with AI coding assistants, I feel <em>supercharged</em>. The barrier between having an idea and bringing it to life has never been lower, especially for experienced developers who can guide these tools effectively.</p>
<p>Yet this new era of software development brings its own unique challenges. How do we effectively provide AI assistants with enough context about our codebase? How should we store and version control the prompts or specifications we use to guide code generation? And what about the explosion in the number of repositories being created, now that the barrier to creating new projects is so much lower? These represent entirely new problems that we&rsquo;ll need to solve as this technology matures, and I&rsquo;ll be writing more about each of these areas as I uncover and learn more about them.</p>
<p>If you haven&rsquo;t tried an AI coding assistant yet, I strongly encourage you to give it a go. Pick a tool that suits you best and get started. Start small, be patient as you learn how to work with them effectively, and most importantly - have fun exploring what&rsquo;s possible. Remember that these tools are currently the worst they&rsquo;ll ever be - just two years ago, what we now take for granted seemed almost impossible.</p>
<p>The future of software development is being reshaped right now, and it&rsquo;s an incredibly exciting time to be part of it.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=What It's Really Like Using an AI Coding Assistant">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>Agents All The Way Down</title>
      <link>http://annievella.com/posts/agents-all-the-way-down/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/agents-all-the-way-down/</guid>
      <description>
      
      
      <![CDATA[<p>The concept of <strong>agentic AI</strong> absolutely fascinates me. An LLM on its own is already mind-blowing, but building much larger systems where hundreds of specialised LLMs work together as components, with yet another LLM orchestrating how it all works, is a whole other world. The possibilities for automation are endless.</p>
<p>At the end of the day, software systems are just components stitched together to perform seemingly complex tasks, but the logic behind it all is very <em>deterministic</em>. As software engineers, we write lines of code to tell computers to do very specific things, in very specific orders. The computer then executes those instructions in a deterministic way, and we&rsquo;re left with a very predictable system that can be hard to change or adapt to new requirements.</p>
<p>With agentic AI, we&rsquo;re no longer bound by the limitations of this deterministic approach. Agentic AI allows us to use LLMs to intelligently adapt and evolve these integrations. We simply equip agents with skills (tools) and memory to help them solve problems, and they work out the rest on their own. These agents can use various architectures to tackle problems - one popular approach is <a href="https://medium.com/@gauritr01/part-1-react-ai-agents-a-guide-to-smarter-ai-through-reasoning-and-action-d5841db39530">ReACT</a> (Reasoning + Acting, not the frontend framework we all know and love), which allows them to think through problems step by step, just like a human would - reasoning about what to do next, then taking action based on that reasoning.</p>
<figure class="center"><img src="http://annievella.com/images/ai-agent-overview.png"
    alt="Diagram showing the components of an agentic AI system including tools, memory, planning, and reflection capabilities"><figcaption>
      <p>The architecture of an agentic AI system showing how agents can use tools, maintain memory, and engage in complex reasoning. <br/> Credit: <a href="https://commons.wikimedia.org/wiki/File:AI_Agent_Overview.png">Lillian Weng</a>, <a href="https://creativecommons.org/licenses/by-sa/4.0">CC BY-SA 4.0</a>, via Wikimedia Commons</p>
    </figcaption>
</figure>

<h2 id="the-rise-of-agentic-ai">The Rise of Agentic AI</h2>
<p>I&rsquo;m certainly not alone in my enthusiasm for agentic AI.</p>
<p>Just in the last week, Jensen Huang, CEO of NVIDIA, remarked that we&rsquo;re entering the era of agentic AI at the <a href="https://www.youtube.com/live/k82RwXqZHY8">CES 2025 event</a> and Sam Altman, CEO and co-founder of OpenAI, also said that &ldquo;AI agents will join the workforce&rdquo; in 2025 in his blog post, <a href="https://blog.samaltman.com/reflections">Reflections</a>:</p>
<blockquote>
<p>&ldquo;We believe that, in 2025, we may see the first AI agents “join the workforce” and materially change the output of companies.&rdquo;</p>
</blockquote>
<p>Microsoft <a href="https://techcommunity.microsoft.com/blog/microsoft365copilotblog/introducing-new-agents-in-microsoft-365/4296918">announced a set of new agents</a> for Microsoft 365 in November 2024, including:</p>
<ul>
<li>A Facilitator agent for Microsoft Teams, that will take notes and summarise meetings</li>
<li>An Interpreter agent for Microsoft Teams, allowing users to speak to one another in their language of choice</li>
<li>A Project Manager agent, which automates overseeing entire projects, including plan creation, task assignment, progress tracking and status reporting</li>
<li>An Employee Self-Service agent, enabling employees to get real-time answers and take action on key HR and IT topics</li>
</ul>
<p>The research community has also recognised the potential of agentic AI, with researchers from Berkeley, Stanford, Google DeepMind, OpenAI, Anthropic, MetaAI and others running fantastic massive open online courses like <a href="https://llmagents-learning.org/f24">Large Language Model Agents</a>:</p>
<blockquote>
<p>&ldquo;With the continuous advancement of LLM techniques, LLM agents are set to be the upcoming breakthrough in AI, and they are going to transform the future of our daily life with the support of intelligent task automation and personalization.&rdquo;</p>
</blockquote>
<p>I thoroughly recommend watching the lectures which are available on their <a href="https://www.youtube.com/playlist?list=PLS01nW3RtgopsNLeM936V4TNSsvvVglLc">YouTube Channel</a>.</p>
<p>It&rsquo;s impossible not to see the enormous potential in all this. The future of software lies in systems where LLMs drive the logic engine, dispatching instructions to invoke tools, which in turn can also be powered by LLMs. Erik Meijer captures this vision perfectly in his paper <a href="https://dl.acm.org/doi/pdf/10.1145/3676287">Virtual Machinations: Using Large Language Models as Neural Computers</a>, drawing parallels between conventional and neural computers:</p>
<figure class="center"><img src="http://annievella.com/images/erik-meijer-neural-computer-comparison.png"
    alt="Comparison of Conventional and Neural Computers - [Virtual Machinations: Using Large Language Models as Neural Computers](https://dl.acm.org/doi/pdf/10.1145/3676287)"><figcaption>
      <p>Comparison of Conventional and Neural Computers - <a href="https://dl.acm.org/doi/pdf/10.1145/3676287">Virtual Machinations: Using Large Language Models as Neural Computers</a></p>
    </figcaption>
</figure>

<p>Through his comparison of conventional and neural computers, Erik builds towards his fascinating work on developing a natural language-based reasoning language for programming these neural systems. This work has the potential to introduce a whole new type of computing and I can&rsquo;t wait to see what they achieve.</p>
<h2 id="from-theory-to-practice">From Theory to Practice</h2>
<p>With a bit of time on our hands this Christmas, <a href="https://jasonvella.com">Jason Vella</a> and I decided to run our own mini-hackathon. We set ourselves a goal of building something using an agentic AI, mainly for learning purposes. Even though the concept is quite nascent, there are already quite a number of agentic AI frameworks out there:</p>
<ul>
<li><a href="https://www.langchain.com/">LangChain</a>: A framework for developing applications powered by language models, with composability and modularity.</li>
<li><a href="https://python.langchain.com/docs/langgraph">LangGraph</a>: An extension of LangChain for creating stateful, multi-agent applications using a graph-based approach.</li>
<li><a href="https://microsoft.github.io/autogen/">AutoGen</a>: An open-source framework for building AI agents that can collaborate to solve complex tasks.</li>
<li><a href="https://www.crewai.com/">CrewAI</a>: A framework designed for rapid prototyping of multi-agent systems for ease of use and quick iteration.</li>
<li><a href="https://www.llamaindex.ai/">LlamaIndex</a>: A data framework for building LLM applications, focusing on data ingestion and retrieval.</li>
<li><a href="https://learn.microsoft.com/en-us/semantic-kernel/overview/">Semantic Kernel</a>: Microsoft&rsquo;s AI orchestration framework combining natural language processing with traditional programming.</li>
</ul>
<p>We chose to use <a href="https://www.crewai.com">CrewAI</a> as it seems to a good option for getting something up and running fairly quickly. They&rsquo;ve got some good <a href="https://github.com/crewAIInc/crewAI-examples?tab=readme-ov-file">examples</a> and loads of great <a href="https://docs.crewai.com/introduction">documentation</a>.</p>
<h2 id="going-meta-the-recursive-developer">Going Meta: The Recursive Developer</h2>
<p>CrewAI is a Python-based framework (it seems most are), and unfortunately I&rsquo;ve had very little experience writing Python. Luckily, I have become pretty good at using <a href="https://codeium.com/windsurf">Windsurf</a>. Its Cascade feature, powered by <a href="https://codeium.com/flows">AI Flows</a>, actively reasons about my intent and helps me write code in languages I&rsquo;m not familiar with - it&rsquo;s like having an AI collaborator that truly understands what I&rsquo;m trying to achieve. Although it&rsquo;s not entirely obvious, you can see when different agents within the flows are collaborating on a code change - sometimes it will make a change, recognise that it&rsquo;s made a mistake, and fix it - all without me having to say anything. So here I am, <em>using one agentic AI system to help me build another</em>, how delightfully meta and yet more proof that agentic AI is the future!</p>
<p>This experience validates what <a href="https://www.linkedin.com/in/andrewyng/">Andrew Ng</a> recently discussed in <a href="https://www.deeplearning.ai/the-batch/new-opportunities-for-the-new-year/">The Batch</a> about AI-coding assistants being especially effective for prototyping. It also aligns perfectly with findings from my Master of Engineering research on the impact of AI coding assistants on software engineering. In analysing software engineers&rsquo; responses about workflow changes, I have found that those using AI coding assistants were not only more likely to explore unfamiliar technologies but also felt they could prototype faster. To me, it feels like having an endlessly patient pair programmer to work with!</p>
<figure class="center full-width"><img src="http://annievella.com/images/initial-thematic-analysis-results.jpeg"
    alt="Initial thematic analysis of an open-ended question around software engineers&#39; perceived impact on their workflows" width="100%"><figcaption>
      <p>Initial thematic analysis of an open-ended question around software engineers&rsquo; perceived impact on their workflows</p>
    </figcaption>
</figure>

<h2 id="building-my-first-agentic-ai-system">Building My First Agentic AI System</h2>
<p>Out of the box, setting up a CrewAI project creates a simple, default &ldquo;Research Assistant&rdquo; crew which was nearly exactly what we chose as the first example anyway! Since I need to find and read papers for my Master&rsquo;s study, an automated research assistant felt like a practical, achievable and useful system to build.</p>
<p>At this point, Jason spun off to play with AutoGen while I designed my research assistant crew to find the five most relevant recent papers on a given topic, matching them against specific research questions, and then deliver a summary by email. I decided to give my &ldquo;research aggregator&rdquo; agent a custom tool using Google Scholar (via <a href="https://serpapi.com">SerpAPI</a>) and my &ldquo;research analyst&rdquo; agent another custom tool to send emails using the <a href="https://developers.google.com/gmail/api/quickstart/python">Gmail API</a>.</p>
<p>To run it automatically, I used <code>launchd</code>, although I&rsquo;m sure cron would&rsquo;ve done the job nicely too. And for the last couple of weeks, I&rsquo;ve received a daily digest of interesting and relevant papers on the impact of AI coding assistants on software engineering, complete with links and insights! I love it!</p>
<figure class="center"><img src="http://annievella.com/images/daily-research-digest-agentic-ai.png"
    alt="Daily Research Digest - delivered by my first agentic AI system built using CrewAI"><figcaption>
      <p>Daily Research Digest - delivered by my first agentic AI system built using CrewAI</p>
    </figcaption>
</figure>

<h2 id="the-challenges-of-non-deterministic-systems">The Challenges of Non-Deterministic Systems</h2>
<p>The biggest head-scratcher came when trying to pass variables between tasks. My research analyst agent has two jobs: summarise papers into a markdown file, then email that summary. Simple, right? My programmer brain figured I could configure the filepath once and pass it into each task as an argument - which you kind of can, but the agent seems to be modifying it before using it.</p>
<p>What I discovered is that working with agentic AI systems requires a different debugging mindset. When your system can think and adapt, tracking down why it&rsquo;s not behaving as expected becomes a lot more difficult. It&rsquo;s not just about finding logic errors anymore – it&rsquo;s about understanding how the agent is interpreting and executing its tasks.</p>
<p>This and many other challenges will become the <strong>new software engineering problems</strong> to solve. I believe these are the sorts of problems that Computer Science and Software Engineering students will study in the future. This is something that I&rsquo;m particularly interested in and hope to continue to uncover further as I continue my research.</p>
<p>Besides that quirk, I spent most of my time building the logic for the tools. There&rsquo;s for sure going to be a market for these &rsquo;tools&rsquo; which are basically just little client libraries built over APIs. CrewAI allows you to use tools built for both <a href="https://docs.crewai.com/concepts/langchain-tools">LangChain</a> and <a href="https://docs.crewai.com/concepts/llamaindex-tools">LlamaIndex</a>, as long as you wrap them in custom tools.</p>
<h2 id="whats-next">What&rsquo;s Next</h2>
<p>When I was much younger, I used to stay up way too late building side projects. I seemed to have boundless energy to tinker away with the latest and greatest at the time (AJAX, Google Maps, then later, Windows Phone, Objective-C - ahh, the good ol&rsquo; days). But life got in the way and nowadays I never seem to find the time to spend building all the ideas I have. However, AI tools like Windsurf and ChatGPT have given me such a boost that many of these ideas now seem within reach again, removing the friction that often stops us from turning ideas into reality.</p>
<p>Then add the extended possibilities that agentic AI frameworks give us and well, it&rsquo;s not hard to see the massive opportunities that lie ahead. The only real constraint now is our imagination. If you can imagine it, you can probably build it - and fairly quickly, too.</p>
<p>Of course now that I&rsquo;ve built one of these, I want to build more. I&rsquo;ve always loved the idea of having software &ldquo;do things for me&rdquo; in the background and now, with little effort, it can do so much more. The hardest thing might be to train my brain to not limit itself when dreaming up the next side project.</p>
<p>If you&rsquo;re a software engineer reading this, please don&rsquo;t wait - dive in and start playing with these tools as soon as can. Like any new technology, they take time to master, but the learning curve is absolutely worth it. The sooner you start experimenting, the sooner you&rsquo;ll discover just how much they can amplify what you can build and how you build it. After all, it really is agents all the way down.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=Agents All The Way Down">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>2024 In Review: Expanding Horizons</title>
      <link>http://annievella.com/posts/2024-in-review/</link>
      <pubDate>Thu, 02 Jan 2025 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/2024-in-review/</guid>
      <description>
      
      
      <![CDATA[<p>2024 was a massive year for me, and even that feels like an understatement. I pushed myself to my limits in many ways, but have enjoyed every second of it. After all, if you&rsquo;re comfortable, you&rsquo;re not growing, right?</p>
<p>My passion for continuous learning kicked into overdrive these past couple of years, leading me down fascinating intellectual paths. Could it be that AI has helped make information more accessible? Or is it that I&rsquo;ve finally found my calling? I can&rsquo;t really say for sure, but I&rsquo;ve found myself deeply immersed in several interconnected domains:</p>
<ul>
<li><a href="https://annievella.com/deming/">W Edwards Deming</a>, <a href="https://annievella.com/posts/exploring-systems-thinking-through-russell-ackoff/">Russell Ackoff</a> and <a href="https://www.linkedin.com/posts/annievella_leadership-systemsthinking-activity-7264717823875137537-Joda">Peter Scholtes</a>
<ul>
<li>Systems Thinking</li>
<li>Leadership</li>
<li>Organisational Design</li>
</ul>
</li>
<li>Generative AI
<ul>
<li><a href="https://annievella.com/posts/an-early-exploration-of-ai-first-development/">AI-Assisted Development</a></li>
<li><a href="https://annievella.com/posts/is-agentic-ai-the-key-to-automating-human-work/">Agentic AI Systems</a></li>
<li>LLMs as CPUs</li>
</ul>
</li>
<li>Active Inference
<ul>
<li>Free Energy Principle</li>
<li>The Bayesian Brain</li>
<li>Information Theory</li>
<li>Cognitive Science</li>
</ul>
</li>
<li><a href="https://annievella.com/quantum-computing/">Quantum Computing</a>
<ul>
<li>Error Correction</li>
</ul>
</li>
</ul>
<p>These topics have rekindled a passion for abstract and theoretical thinking, something I enjoyed so much at university but could never find a practical reason to keep doing. Exploring these topics is leading to some fascinating new thoughts, tickling my brain in the best possible way. There&rsquo;s a constant desire to soak in more information and turn it into knowledge and honestly, it&rsquo;s becoming a bit of an obsession.</p>
<p>I&rsquo;m convinced that all this learning has been valuable in my role at Westpac NZ, where I continue to explore and shape what staff engineering and technical leadership mean at an organisational level. It&rsquo;s an energising mix of driving technical excellence and shaping strategy, while ensuring our engineering practices align with and support ourbusiness outcomes. What I love most is how it lets me champion both Systems Thinking and continuous learning - whether I&rsquo;m working with executives on strategic initiatives, collaborating with architecture teams on governance, or mentoring engineers to grow our technical leadership capability.</p>
<p>This obsession with learning has manifested in several ways this last year:</p>
<ul>
<li>I started a part-time, research-only Masters of Engineering at the University of Auckland. I designed and kicked off a longitudinal study to explore the impact of AI on software engineering. The first questionnaire is already collecting some really interesting data that I&rsquo;m enjoying analysing.</li>
<li>I continued to study Deming&rsquo;s philosophies and in the process, discovered other big thinkers like Russell Ackoff and Peter Scholtes. This has led to a deep sense of awakening around Systems Thinking and leadership. It has left me wondering why in all these years I had never come across these inspirational thinkers before, even though I&rsquo;ve read countless books on leadership. As a mentor said to me recently - <em>&ldquo;the student wasn&rsquo;t ready yet&rdquo;</em>.</li>
<li>I <a href="https://www.linkedin.com/posts/annievella_deming-leadership-systemsthinking-activity-7253124197604868096-AffF">attended a Deming Leadership Seminar</a> run by <a href="https://deming.org/">The Deming Institute</a> in Columbus, Ohio, connecting with many other Deming students and coaches, and deepening my understanding of his philosophies.</li>
<li>I even got to visit the IBM Innovation Lab in Poughkeepsie, New York, and <a href="https://www.linkedin.com/posts/annievella_quantumcomputing-ibmquantum-techdreamscometrue-activity-7251681532510117889-R1br">saw a real functioning quantum computer in person</a>!</li>
</ul>
<p>Beyond consuming data and information and transforming it into knowledge, I continued to push myself to share what I was learning through public speaking - something that still scares me but in a good way:</p>
<ul>
<li><a href="https://www.linkedin.com/posts/annievella_staffpluslondon-activity-7206572800386453504-5pN3">Taking the stage at StaffPlus London</a> marked a significant milestone - my first major international conference. While the prestigious nature of this event sparked many nerves, the experience proved incredibly rewarding.</li>
<li>I kept the momentum going by speaking at several other events and even <a href="https://annievella.com/files/ada-lovelace-day-auckland-october-2024-quantum-computing-101.pdf">gave a talk on Quantum Computing</a>.</li>
</ul>
<p>Perhaps the most unexpected development was rediscovering my love for coding. After years focused on leadership and management, analysing my research data in R and Python reignited that old spark. With the help of AI coding assistants, I&rsquo;m now enjoying getting things to work again. I even built an Agentic AI Research Assistant that curates and delivers personalised research paper digests daily for my Master&rsquo;s study - the kind of project that combines my love for coding with my passion for learning.</p>
<figure class="centre"><img src="http://annievella.com/images/github-contributions-2024.png"
    alt="My GitHub Contributions in 2024"><figcaption>
      <p>My GitHub Contributions in 2024</p>
    </figcaption>
</figure>

<p>Looking back, I&rsquo;m proud to have achieved my 2023 goal of speaking at an international conference, along with making significant strides in reading and writing more. While these achievements demanded considerable time and energy, the one area that didn&rsquo;t get enough attention was exercise - and I really miss that energy boost it gives me.</p>
<p>In 2025, my goal is to leverage all these learnings and become more efficient at capturing, processing, and digesting information. Hopefully this will create more space and time for exercise, because growth isn&rsquo;t just about the mind - it&rsquo;s about the whole system, right?</p>
<p><strong>Key Accomplishments of 2024:</strong></p>
<p><em>Conference Talks:</em></p>
<ul>
<li><a href="https://annievella.com/files/code-camp-wellington-april-2024-lessons-in-technical-leadership.pdf">Staff Engineering: A Technical Alternative to Management</a> at <a href="https://www.codecampwellington.nz/">Code Camp Wellington</a> in Wellington, NZ, on April 13</li>
<li><a href="https://annievella.com/files/staffplus-london-june-2024-deming's-wisdom-for-staff-plus-engineers.pdf">Deming’s Wisdom for Staff+ Engineers: A Modern Take on Timeless Principles</a> at <a href="https://leaddev.com/events/staffplus-london-2024">StaffPlus London</a> in London, UK, on June 11</li>
<li>The Biggest Lessons I’ve Learned as an Engineering Leader at <a href="https://lu.ma/cpr2xlfy">The Movac Engineering Jam</a> in Auckland, NZ, on September 17</li>
<li><a href="https://annievella.com/files/ada-lovelace-day-auckland-october-2024-quantum-computing-101.pdf">Quantum Computing 101: An Easy Introduction to a Hard Topic</a> at <a href="https://events.humanitix.com/ada-lovelace-day-2024">Ada Lovelace Day</a> in Auckland, NZ, on October 9</li>
</ul>
<p><em>Panels:</em></p>
<ul>
<li><a href="https://techwomen.nz/event/ada-lovelace-day-2024-celebrating-female-tech-leaders/">Ada Lovelace Day 2024 – Celebrating Female Tech Leaders Panel</a> in Auckland, NZ, on October 8</li>
<li>DevFest AI Panel in Auckland, NZ, on November 10</li>
</ul>
<p><em>Podcasts:</em></p>
<ul>
<li><a href="https://youtu.be/ZIQu5OKvN30?si=uF9JrNhFlD4X9ho9">S1E3 - Distinguished Engineer Annie Vella’s wild career journey and finding joy as a reluctant manager</a> recorded with <a href="https://www.linkedin.com/in/scott-carey-262b0225/">Scott Carey</a> for <a href="https://www.youtube.com/playlist?list=PLBzScQzZ83I-s27CEsc9c1hbTy9fbdmEH">LeadDev PriorityZero Podcast</a> in London, UK, on June 11</li>
<li><a href="https://open.spotify.com/episode/45J4XmqB9pj60H79nThgqC?si=b5c069df8e9a4823">Systems Thinking, AI, and Innovation with Annie Vella</a> recorded with <a href="https://www.linkedin.com/in/jakubjurkiewicz/">Jakub Jurkiewicz</a> for <a href="https://open.spotify.com/show/1vfos26hvJkCuhDZwl5MRv?si=f1bb69a3b43c47bd">Tech Waka Podcast</a> in Auckland, NZ, on November 26</li>
</ul>
<p><em>Conferences Attended:</em></p>
<ul>
<li><a href="https://techcommunity.microsoft.com/blog/mvpawardprogramblog/microsoft-ai-tour--sydney-bengaluru-tokyo/4093971">Microsoft AI Tour</a> in Sydney, Australia, on February 7</li>
<li><a href="https://deming.org/events/2024-deming-leadership-seminar/">Deming Leadership Seminar</a> in Columbus, Ohio, USA, on October 16 &amp; 17</li>
</ul>
<p><em>Books Read / In Progress:</em></p>
<ul>
<li>&ldquo;What Is ChatGPT Doing &hellip; And Why Does It Work?&rdquo; by Stephen Wolfram</li>
<li>&ldquo;The New Economics&rdquo; by W. Edwards Deming</li>
<li>&ldquo;The Leader&rsquo;s Handbook: Making Things Happen, Getting Things Done&rdquo; by Peter Scholtes</li>
<li>&ldquo;Active Inference: The Free Energy Principle in Mind, Brain, and Behavior&rdquo; by Thomas Parr, Giovanni Pezzulo, and Karl J. Friston</li>
</ul>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=2024 In Review: Expanding Horizons">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>Dear Software Engineer: It&#39;s Time to Reclaim Your Role</title>
      <link>http://annievella.com/posts/dear-software-engineer/</link>
      <pubDate>Thu, 26 Dec 2024 00:00:00 +1300</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/dear-software-engineer/</guid>
      <description>
      
      
      <![CDATA[<p><em>Apologies, this is a long one - clearly I&rsquo;ve got a lot to say on this subject!</em></p>
<p>It didn&rsquo;t take long after ChatGPT was released for me to start seeing how fundamentally this technology could transform software engineering. Not just as another tool in our arsenal, but as something that could redefine what it means to be a software engineer entirely.</p>
<p>The discourse around this has been fascinating. Jump on LinkedIn or X and you&rsquo;ll see endless debates about whether AI will augment or replace software engineers, whether it&rsquo;s just another productivity tool or a paradigm shift, whether it&rsquo;s overhyped or understated. But I think many are missing the real story - it&rsquo;s not about whether AI will take our jobs, it&rsquo;s about how it&rsquo;s already changing the very nature of our profession.</p>
<figure class="center"><img src="http://annievella.com/images/software-engineering-is-dead.png"
    alt="Software Engineering is Dead"><figcaption>
      <p><a href="https://x.com/KevinNaughtonJr/status/1796241418484334722">Software Engineering is Dead</a></p>
    </figcaption>
</figure>

<p>This transformation has captured my attention deeply. You see, I&rsquo;m a software engineer. I still call myself one even though it&rsquo;s been a few years since I actively <em>built</em> software because I&rsquo;ve been busy leading teams of software engineers for the last few years. But I still think of myself as a software engineer.</p>
<p>You&rsquo;ll often hear me talk about how much I&rsquo;ve loved my career, because I genuinely have. Perhaps I was lucky and found my calling at a very young age, but ever since I lay my little 6-year-old fingers on that Commodore 64, I was hooked. Since I believe software engineering has been a great career choice, and I want everyone to experience the same joy and fulfillment that I have, I&rsquo;ve encouraged many people to consider it as a career over the years.</p>
<p>Until now, most changes I&rsquo;ve experienced in our field felt more like evolution than revolution. I saw web technologies take off - remember when AJAX became a thing and jQuery was your ticket to building cool dynamic websites? I lived through mobile taking off, cloud computing, CI/CD, and so on. But in many ways, we were just doing the same things with newer toys: new frameworks, new approaches, much more automation.</p>
<h3 id="when-ai-changes-everything">When AI Changes Everything</h3>
<p>What’s happening now with AI, however, feels far more like a <strong>tectonic shift</strong> than just another iteration of the same old cycle - and my Master&rsquo;s research is confirming this. The data clearly shows that AI is already having a significant impact on how software engineers work. Not everyone sees it. Not everyone <em>wants</em> to see it. But it&rsquo;s happening.</p>
<p>Many in our industry remain confident that our roles as software engineers are safe because software engineering is much more than coding. The prevailing argument is that while AI might help us write code faster, the &ldquo;real&rdquo; work of software engineering lies in designing systems, making architectural decisions, and understanding user needs. It&rsquo;s a comforting thought, isn&rsquo;t it? A neat way to put AI back in its box as just another productivity tool.</p>
<p>I totally agree that software engineering <em>should</em> be a lot more than just writing code. When I studied computer science at university, they taught us how to elicit requirements, write user stories, design user interfaces and apply UX principles, architect complex systems, create test plans, execute test cases and so much more. The whole shebang.</p>
<p>But here&rsquo;s where it gets interesting: many developers today aren&rsquo;t actually doing all those tasks anymore. I&rsquo;m lucky enough that for the first 10 years of my career, when I was an individual contributor, I got to do all these things. I spoke to clients and stakeholders directly, gathered requirements, asked questions, made suggestions, and challenged their assumptions. Ultimately, I was given problem statements and solved them. I wrote frontend and backend code, designed database schemas and built them all from scratch, wrote and fine-tuned SQL queries, configured web servers, set up build pipelines, and monitored how things were running. I felt unstoppable - through hands-on practice, I had gained the skills to build and run software end-to-end. And god, it felt good. At my core, I was solving problems, and that&rsquo;s what I love doing.</p>
<h3 id="how-we-got-here-the-rise-of-specialisation">How We Got Here: The Rise of Specialisation</h3>
<p>Looking back at that experience now, it feels like a different era. Over the last decade, I&rsquo;ve watched software engineers step back from many of these responsibilities. Many now focus almost entirely on writing the code, letting others handle everything else.</p>
<p>Why has this happened? Well, I&rsquo;m sure there are many reasons. I can&rsquo;t help but wonder if at least part of the reason is that as software needs grew exponentially, the demand for software engineers grew too - and there just weren&rsquo;t enough of us. So we found ways to divide and conquer through specialisation. We introduced roles like the Product Owner who speaks to the customer and collects requirements for us, so that we can focus on the part that others perceive to be the part that only developers can do - writing the code. In some organisations, there are also Business Analysts analysing requirements, Project Managers coordinating delivery, Designers doing the UI/UX, Architects doing the solution design, Quality Engineers doing the testing, and Platform Engineers setting up the infrastructure, running the pipelines, and generally keeping the lights on.</p>
<p>I&rsquo;m not alone in noticing this shift. <a href="https://www.linkedin.com/in/alexewerlof/">Alex Ewerlöf</a> wrote about this recently in his piece on <a href="https://blog.alexewerlof.com/p/breaking-role-to-titles">breaking roles into multiple titles</a>. He sees what I see - how splitting up our craft this way is making us lose the very things that made software engineering special: the ownership, the synergy, the true craftsmanship.</p>
<p>By breaking up what used to be the role of a software engineer into all these disparate jobs, what&rsquo;s really left? For a lot of software engineers, the only thing that&rsquo;s really left is writing the code.</p>
<h3 id="product-engineers-vs-traditional-engineers">Product Engineers vs. Traditional Engineers</h3>
<p>To prove my point, new titles like &ldquo;Product Engineers&rdquo; have emerged to describe software engineers who do what everyone claims software engineers should be doing - you know, all those things that supposedly keep us safe from AI.</p>
<p><a href="https://www.linkedin.com/in/sherifmansour/?originalSubdomain=au">Sherif Mansour</a> wrote a <a href="https://sherifmansour.medium.com/product-engineers-f424da766871">piece</a> describing product engineers as &ldquo;<em>not traditional engineers</em>&rdquo;. Another <a href="https://posthog.com/blog/what-is-a-product-engineer">article</a> distinguishes them as unique because they &ldquo;<em>care about building a solution to problems that provides value to users</em>&rdquo; - as opposed to just &ldquo;<em>writing code and shipping features</em>&rdquo; like traditional software engineers apparently do.</p>
<p>And here&rsquo;s the kicker. An <a href="https://www.vipshek.com/blog/product-engineer">article</a> from earlier this year describes product engineers as:</p>
<blockquote>
<p>In recent years, the software industry has started to adopt the term product engineer to refer to a customer-focused, full-stack engineer who blurs the lines between product and engineering roles. I think of product engineers as generalists who can take an ambiguous problem statement, define a solution to it in collaboration with users or customers, and design, implement, and deliver that solution.</p>
</blockquote>
<p>Hang on a second, I thought that was what <em>software engineers</em> did?!</p>
<p>Yikes. Talk about contradiction - our industry claims software engineering is about so much more than coding, yet we&rsquo;ve created a special new term for engineers who actually do those things, while regular software engineers have become specialised code writers and feature shippers. So much for all those things that were supposed to keep us safe from AI!</p>
<p>&ldquo;So what?&rdquo;, you might say. Perhaps there&rsquo;s room for both. After all, there&rsquo;s so much demand for software engineers, and maybe some just want to focus on writing the code.</p>
<h3 id="the-game-changer-generative-ai">The Game-Changer: Generative AI</h3>
<p>That argument might have held water a year ago. But then generative AI came along. Because as it turns out, LLMs (and agentic AI) are <strong>really good</strong> at writing code, and much, much faster than any human can. And here&rsquo;s the problem: most &ldquo;traditional&rdquo; software engineers today do little more than translate almost-pseudo-code written requirements in user stories into compilable code - exactly the kind of task that AI is becoming better at every single day.</p>
<p>Sure, if you&rsquo;re one of the rare &ldquo;product engineers&rdquo; who actually work on the full spectrum of software engineering, perhaps you&rsquo;re fine. But remember, we just established that this has become the exception rather than the rule.</p>
<h3 id="what-the-data-says">What the Data Says</h3>
<p>AI&rsquo;s impact on coding isn&rsquo;t just speculation. My Master&rsquo;s research so far has confirmed that AI coding assistants are already reducing the time professional software engineers spend on writing code, with a staggering 78% of 165 respondents across 28 countries feeling they&rsquo;re spending less time writing code.</p>
<figure class="center"><img src="http://annievella.com/images/impact-on-time-spent-on-software-engineering-tasks-with-AI-assistance.png"
    alt="Time Spent on Software Engineering Tasks with AI Assistance"><figcaption>
      <p>Time Spent on Software Engineering Tasks with AI Assistance</p>
    </figcaption>
</figure>

<p>I wrote about the potential impacts of AI on software engineering back in February 2024 - <a href="https://annievella.com/posts/an-early-exploration-of-ai-first-development/">An Early Exploration of AI-First Development</a> - and boy has this landscape changed since then. It feels like there are new tools that do more, better and faster being released every single day. My research survey ran for a month in October / November 2024, and I was stunned to see how many AI tools software engineers are already playing with. Windsurf didn&rsquo;t get a mention but it hadn&rsquo;t even been released yet!</p>
<figure class="center"><img src="http://annievella.com/images/most-used-AI-coding-assistants.png"
    alt="Most Used AI Coding Assistants"><figcaption>
      <p>Most Used AI Coding Assistants</p>
    </figcaption>
</figure>

<h3 id="steve-yegge-and-the-stubborn-developer">Steve Yegge and the Stubborn Developer</h3>
<p><a href="https://www.linkedin.com/in/steveyegge/">Steve Yegge</a> recently wrote a follow-up to his controversial article <a href="https://sourcegraph.com/blog/the-death-of-the-junior-developer">The Death of the Junior Developer</a>, reframing his position as <a href="https://steve-yegge.medium.com/the-death-of-the-stubborn-developer-b5e8f78d326b">The Death of the Stubborn Developer</a>. He talks about how if you’re not adopting Chat-Oriented Programming, or CHOP, you’re getting left behind.</p>
<blockquote>
<p>If you’re not using chop, then you’re plodding. You’re like one of those crusty old assembly-language holdouts still using asm in 1990 because compiler-generated code wasn’t fast enough. Stubborn bastards, the lot of ’em. Sound familiar?</p>
</blockquote>
<p>I agree with everything he says in his riveting but lengthy article, except perhaps the part about autonomous software agents. I’ve spent the last month using Codeium’s <a href="https://codeium.com/windsurf">Windsurf</a> - self-described as the “first agentic IDE” - and I tell you what, it’s absolutely incredible. This is so much more than just chat, copy, paste, repeat. With Windsurf, I tell it what I want and it generates <em>all</em> the code. All of it. And honestly, the code is good. And if it isn’t, I just tell it to fix it and it does! Sometimes it even recognises that it’s made a mistake before I do and it goes ahead and fixes it without me having to say anything. The future is here, my friends.</p>
<p><a href="https://www.cursor.com">Cursor</a> is another fantastic IDE that works in much the same way. And then there are countless other web-based tools that can create entire codebases from a prompt, like <a href="https://bolt.new">Bolt</a>, <a href="https://v0.dev">v0</a>, and of course, <a href="https://lovable.dev">Lovable.dev</a> which is gaining traction at an incredible rate.</p>
<h3 id="from-chop-to-baton">From CHOP to BATON</h3>
<p>These tools are just the beginning. I think we&rsquo;re rapidly moving into an era where humans no longer write code by hand. Instead, we instruct agentic AI systems that use LLMs to do it for us. But it&rsquo;s not just about one-on-one interaction with AI - the future might look more like managing an entire AI development team. In <a href="https://medium.com/@joe_30979/from-chop-to-baton-the-evolution-of-ai-assisted-development-cf80c9de2e3d">From CHOP to BATON: The Evolution of AI-Assisted Development</a>, the author explores what comes after CHOP, introducing a new paradigm called BATON - Bot-Assisted Task OrchestratioN:</p>
<blockquote>
<p>With BATON, your role shifts from being a hands-on coder to something more akin to a conductor or a project manager. You&rsquo;re no longer writing every line of code yourself, or even pair programming with an AI. Instead, you&rsquo;re breaking down projects into well-defined tasks, delegating them to multiple AI systems, and overseeing the entire development process. Need a suite of unit tests written? Delegate it. Have a simple, but annoying feature to implement? Assign it to your AI team.</p>
</blockquote>
<p>In other words, CHOP is just the beginning. With BATON, a software engineer&rsquo;s role shifts from coding line-by-line to orchestrating and overseeing multiple AI &ldquo;team members,&rdquo; each responsible for different chunks of work. This represents a fundamental change in what it means to be a software engineer - and a clear signal that we need to expand our skill sets beyond just writing code.</p>
<h3 id="so-what-can-you-do-about-it">So What Can You Do About It?</h3>
<p>If you’re a software engineer and upon reflection suspect you may have fallen into the trap of specialising as a code writer, listen up. It&rsquo;s time to broaden your horizons. To get started, you could try:</p>
<ul>
<li>Participating in all the activities involved in building software, not just writing code</li>
<li>Requesting problem statements instead of accepting pre-digested solutions disguised as user stories</li>
<li>Shifting yourself left - joining your Product Owner in stakeholder meetings, asking questions, challenging assumptions, and making suggestions</li>
<li>Understanding the drivers behind the work by exploring the data and decisions shaping your projects</li>
<li>Reading <a href="https://www.linkedin.com/in/gergelyorosz/">Gergely Orosz</a>&rsquo;s article on the <a href="https://blog.pragmaticengineer.com/the-product-minded-engineer/">9 key traits of product-minded engineers</a> and developing those skills</li>
</ul>
<p>So dear software engineer, please take heed. If you’re not a &ldquo;product engineer&rdquo; and have specialised in writing code, AI <em>may indeed take your job</em>. But this isn&rsquo;t just a warning - it&rsquo;s an opportunity. It&rsquo;s time to reclaim your role and return to what software engineering was always meant to be: a craft that combines technical expertise with problem-solving, user empathy, and business acumen. The future belongs to those with curiosity who can see beyond the code.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=Dear Software Engineer: It's Time to Reclaim Your Role">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>The Power of Defining the Problem</title>
      <link>http://annievella.com/posts/the-power-of-defining-the-problem/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/the-power-of-defining-the-problem/</guid>
      <description>
      
      
      <![CDATA[<p>We live in an era where rapid solutions are celebrated. The quicker we solve a problem, the more productive we appear. But what if, in our rush to get to a resolution, we&rsquo;re missing the mark entirely? Albert Einstein&rsquo;s timeless quote, <em>&ldquo;If I were given one hour to save the planet, I would spend 59 minutes defining the problem and one minute resolving it&rdquo;</em>, resonates deeply in today’s fast-paced, technology-driven world.</p>
<blockquote class="large-quote" style="font-size: 1.5em; margin: 40px; margin-bottom: 0"> "If I were given one hour to save the planet, I would spend 59 minutes defining the problem and one minute resolving it."</blockquote>
<p style="margin: 40px; margin-top: 10px; font-size: 0.8em;"><em>— Albert Einstein</em></p>
<p>In my role, both as a software engineer and technical leader, I&rsquo;ve witnessed firsthand the tendency to dive into problem-solving without fully grasping the problem itself. We chase after solutions, applying our experience and tools without considering if we’re aiming at the right target. This often leads to wasted effort, frustration, and missed opportunities.</p>
<p>When we talk about defining the problem, it’s more than just identifying the obvious. It’s about understanding the underlying layers - the root cause, the impact on the business, the user, and the broader system. It requires patience, curiosity, and a willingness to challenge assumptions. In my experience, it’s this depth of understanding that separates good engineers from great ones.</p>
<h3 id="first-principles-the-foundation-of-solutions">First Principles: The Foundation of Solutions</h3>
<p>Once the problem is clearly defined, the next step is to solve it from first principles. This concept, which comes from physics, suggests that we break down complex problems into their most basic elements. By starting from these foundational truths, we avoid relying on assumptions or existing models that might not apply.</p>
<p>In the context of software engineering, solving from first principles forces us to rethink how we approach technical challenges. Are we building on outdated architectures or practices simply because &ldquo;that&rsquo;s how it&rsquo;s always been done&rdquo;? Are we making design choices based on constraints that no longer exist?</p>
<p>When I coach teams, I often find that revisiting first principles can be a powerful way to unlock innovation. It frees engineers from the burden of legacy thinking and opens up new pathways to more efficient, elegant solutions.</p>
<h3 id="but-what-about-the-gaps">But What About the Gaps?</h3>
<p>When we break things down to their most elemental parts, we gain clarity on each piece of the puzzle. But there&rsquo;s a danger here too - focusing only on the parts risks missing the important bits in between: the interactions.</p>
<p>It’s like trying to understand a car by focusing on each part separately. Sure, the engine, wheels, and brakes all have their functions, but it’s the way they all interact that makes the car drive smoothly. And this is where systems thinking comes in.</p>
<p>Systems thinking reminds us, as Russell Ackoff so aptly put it, that a system is more than the sum of its parts; it’s the product of their interactions. In a previous post, I explored Ackoff’s philosophy and the difference between <em>analysis</em> and <em>synthesis</em> - if you’re curious to explore that side of the conversation, feel free to check it out <a href="https://annievella.com/posts/exploring-systems-thinking-through-russell-ackoff/">here</a>.</p>
<blockquote class="large-quote" style="font-size: 1.5em; margin: 40px; margin-bottom: 0"> A system is never the sum of its parts; it’s the product of their interaction.</blockquote>
<p style="margin: 40px; margin-top: 10px; font-size: 0.8em;"><em>— Russell Ackoff</em></p>
<p>Whether we&rsquo;re debugging a piece of software or optimising a process, we need to look at how each part interacts with the others - and how the system as a whole interacts with the larger environment it&rsquo;s a part of. Only then can we fully understand what we&rsquo;re working with.</p>
<h3 id="so-whats-next">So, What’s Next?</h3>
<p>The journey to truly effective problem-solving is about discipline. Define the right problem to work on, then solve it from first principles - but don’t stop there. Remember to consider the interactions between the parts and the system’s place in the larger picture. It sounds simple, but it’s incredibly powerful when applied in practice.</p>
<p>In the world of software development, where speed and agility are prized, it’s tempting to jump to the solution. But if we pause - if we spend that crucial moment, as Einstein suggested, defining the problem thoroughly - we can ensure that our solutions are not only quick but also meaningful and lasting.</p>
<p>As technology continues to evolve, this approach will only become more crucial. The rise of AI, quantum computing, and other cutting-edge innovations will demand engineers who can not only execute quickly but also think deeply. That’s the kind of team I enjoy building and working with - one that thrives on curiosity, challenges assumptions, and delivers solutions that truly matter.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=The Power of Defining the Problem">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>Is Agentic AI the Key to Automating Human Work?</title>
      <link>http://annievella.com/posts/is-agentic-ai-the-key-to-automating-human-work/</link>
      <pubDate>Sat, 31 Aug 2024 09:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/is-agentic-ai-the-key-to-automating-human-work/</guid>
      <description>
      
      
      <![CDATA[<p>I&rsquo;ve been contemplating the concept of <em>agentic AI</em> for a while now. The idea that we can create specialised AI agents, each mastering a specific task, and have them work together iteratively struck me as a powerful way to really harness the power of AI to tackle complex problems. After all, that&rsquo;s how teams of humans working together accomplish amazing outcomes, right?</p>
<p>I first encountered <em><a href="https://news.agpt.co">Auto-GPT</a></em> over a year ago and was intrigued enough to join their Discord community. At that time, the concept of autonomous AI agents was still in its early stages, and Auto-GPT was pioneering an approach that allowed AI systems to autonomously generate and execute their own goals. This innovative idea resonated with me, reinforcing my belief in the transformative potential of specialised AI agents across various industries.</p>
<p>As I continued to explore this concept, <a href="https://www.andrewng.org">Andrew Ng</a>&rsquo;s discussions on agentic AI further deepened my understanding, highlighting how these specialised agents could revolutionise the way we approach complex problems.</p>
<p>While the broad potential of agentic AI to automate and optimise a wide range of jobs is exciting, my focus naturally sharpens when I consider its application to software engineering. This focus ties back to my ongoing Master&rsquo;s research, where I’m exploring the broader impact of AI on software engineering practices. In this context, agentic AI stands out as particularly powerful, offering the possibility to fundamentally change how we develop, test, and maintain software.</p>
<h3 id="what-is-agentic-ai">What is Agentic AI?</h3>
<p>Agentic AI involves multiple specialised AI agents working collaboratively to achieve complex goals. Imagine a team of experts, each with a specific focus - one agent excels at writing code, another at testing, and yet another at conducting security reviews. These agents don&rsquo;t operate in silos; instead, they communicate, iterate, and refine their outputs together, much like a well-coordinated human team.</p>
<p>Andrew Ng, a prominent AI thought leader, emphasizes in his talks, <em><a href="https://youtu.be/sal78ACtGTc?si=ePI6MMzAIPLpG6OX">&ldquo;What&rsquo;s Next for AI Agentic Workflows&rdquo;</a></em> and <em><a href="https://youtu.be/q1XFm21I-VQ?si=uq5e8Z_ZarzdlDrJ">&ldquo;Andrew Ng on AI Agentic Workflows and Their Potential for Driving AI Progress&rdquo;</a></em>, that agentic workflows are inherently more iterative than current LLM-based agents, which typically operate on a zero-shot basis. This iterative nature allows agentic AI to achieve significantly better outcomes. For instance, while zero-shot GPT-3.5 achieved a 48% success rate on the HumanEval coding benchmark, and zero-shot GPT-4 improved to 67.6%, multi-agent AI systems like AutoDev and AgentCoder achieved significantly higher success rates, reaching 91.5% and 96.3%, respectively. This stark contrast highlights the potential of agentic AI to surpass the capabilities of traditional models.</p>
<h3 id="vision-agent-an-open-source-agentic-ai-from-landing-ai">Vision Agent: An Open Source Agentic AI from Landing AI</h3>
<p>One of the practical implementations of agentic AI is the <em><a href="https://github.com/landing-ai/vision-agent">Vision Agent</a></em>, an open-source project developed by Andrew Ng and his team at <a href="https://landing.ai">Landing AI</a>. This agentic AI system is designed to specialise in computer vision tasks, enabling different AI agents to collaborate on complex visual processing tasks, such as object detection, image classification, and anomaly detection.</p>
<p>The Vision Agent framework allows for the modular combination of AI agents, each focusing on a specific aspect of the task. For example, one agent might specialise in edge detection, while another focuses on object classification. By allowing these agents to work together, Vision Agent can deliver more accurate and robust results than a single AI model working alone. The framework&rsquo;s open-source nature also makes it accessible for developers and researchers, encouraging collaboration and further innovation in the field of agentic AI.</p>
<h3 id="metagpt-a-multi-agent-framework">MetaGPT: A Multi-Agent Framework</h3>
<p><em><a href="https://www.deepwisdom.ai">MetaGPT</a></em> is discussed in the paper <em><a href="https://arxiv.org/abs/2402.18679">&ldquo;Data Interpreter: An LLM Agent For Data Science&rdquo;</a></em> by Hong et al. This multi-agent collaborative framework is designed for software development, simulating the software development lifecycle by leveraging multiple AI agents, each specialising in a particular role, such as project management, code writing, and testing. This approach emulates a human software development team, where various specialists collaborate to complete a project effectively.</p>
<p>However, like many multi-agent systems, MetaGPT encounters challenges related to coordinating multiple agents and managing communication overhead. Despite these challenges, MetaGPT illustrates the potential of agentic AI to mirror and enhance human-like collaboration in software development.</p>
<h3 id="agentcoder-multi-agent-code-generation">AgentCoder: Multi-Agent Code Generation</h3>
<p><em><a href="https://github.com/huangd1999/AgentCoder">AgentCoder</a></em>, presented in the paper <em><a href="https://arxiv.org/abs/2312.13010">&ldquo;AgentCoder: Multi-Agent-based Code Generation with Iterative Testing and Optimisation&rdquo;</a></em> by Huang et al., represents another significant advancement in agentic AI. This system is designed specifically for multi-agent code generation, incorporating effective testing and self-optimisation mechanisms. AgentCoder uses a team of AI agents to not only generate code but also to iteratively test and optimize it, ensuring higher quality and efficiency in the code produced.</p>
<p>In evaluations, AgentCoder demonstrated exceptional performance, achieving 95% success on the HumanEval benchmark by leveraging the strengths of multiple specialised agents working together. This success underscores the promise of agentic AI in enhancing the software development process, from code generation to testing and optimisation.</p>
<h3 id="autodev-automated-ai-driven-development">AutoDev: Automated AI-Driven Development</h3>
<p>Microsoft&rsquo;s <em>AutoDev</em> is another cutting-edge framework that exemplifies the potential of agentic AI. As described in the paper <em><a href="https://arxiv.org/abs/2403.08299">&ldquo;AutoDev: Automated AI-Driven Development&rdquo;</a></em> by Tufano et al., AutoDev is designed to fully automate software engineering tasks. It enables AI agents to autonomously perform a wide range of operations within a codebase, including file editing, building, testing, and git operations, all within a secure, user-controlled environment. The framework&rsquo;s effectiveness was demonstrated on the HumanEval dataset, where it achieved a Pass@1 score of 91.5% for code generation and 87.8% for test generation.</p>
<p>AutoDev goes beyond simple code suggestions, integrating deeply with the development environment to manage tasks that typically require significant human intervention. Its ability to handle complex, multi-step tasks autonomously marks a significant leap forward in the capabilities of AI-driven development tools.</p>
<h3 id="why-agentic-ai-matters">Why Agentic AI Matters</h3>
<p>The implications of agentic AI are profound, extending far beyond a single industry. If we can truly harness the potential of agentic AI, the automation of many jobs may be closer than we realise. These AI systems, capable of handling interconnected tasks across various domains, could lead to significant shifts in how work is structured and executed. By distributing tasks among specialised agents, entire workflows could be automated, potentially reducing the need for human intervention in areas that were once considered too complex for AI to manage.</p>
<p>In software engineering, this evolution shifts the focus from human-led coding to human-led prompting. As agentic AI systems take on more of the actual coding, testing, and reviewing, the role of engineers may pivot toward describing requirements in precise, effective ways to guide these AI agents. This change underscores the importance of developing strong skills in articulating and refining prompts - prompt engineering - as the ability to communicate effectively with AI will become increasingly critical in this new paradigm.</p>
<h3 id="looking-ahead">Looking Ahead</h3>
<p>The journey toward fully realising the potential of agentic AI is just beginning. The advancement of frameworks like Auto-GPT, AutoDev, AgentCoder and MetaGPT represents a significant step forward in this direction. As we continue to develop and refine these technologies, we&rsquo;re likely to see even more transformative impacts on the way we approach software engineering.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=Is Agentic AI the Key to Automating Human Work?">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>Deming’s Wisdom for Staff&#43; Engineers: A Recap of My Talk at StaffPlus London 2024</title>
      <link>http://annievella.com/posts/demings-wisdom-for-staff-plus-engineers/</link>
      <pubDate>Sun, 25 Aug 2024 09:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/demings-wisdom-for-staff-plus-engineers/</guid>
      <description>
      
      
      <![CDATA[<p>In June 2024, I had the privilege of travelling from Auckland, New Zealand, to speak at <strong>StaffPlus London</strong> - an unforgettable experience. Speaking at such a high-profile event, surrounded by so many talented Staff+ Engineers, was truly special. What made this event particularly memorable wasn&rsquo;t just the prominence of the event but the opportunity to share something that has become deeply important to me: how the timeless teachings of <strong>W. Edwards Deming</strong> remain as relevant today as ever in the constantly evolving world of technology.</p>
<p>Stepping into a Distinguished Engineer role last year pushed me to explore leadership in new ways. It was during this time that I discovered Deming’s work, which provided me with clarity and direction. His insights have shaped how I think about creating environments where engineers can thrive and continually improve.</p>
<figure class="center"><img src="http://annievella.com/images/staffplus-london-2024-deming.jpeg"
    alt="StaffPlus London 2024 - Deming&#39;s Wisdom for Staff&#43; Engineers"><figcaption>
      <p>StaffPlus London 2024 - Deming&rsquo;s Wisdom for Staff+ Engineers</p>
    </figcaption>
</figure>

<p>For those interested, my <a href="https://annievella.com/files/staffplus-london-june-2024-deming's-wisdom-for-staff-plus-engineers.pdf">slides from the talk are available here</a>, and you can find the <a href="https://leaddev.com/staffplus-london-2024/video/demings-wisdom-staff-engineers-modern-take-timeless-principles">video of the talk here</a>. It may still be paywalled, although I hope it will be accessible soon. In the meantime, below is a summary of the key points I covered during the talk.</p>
<h3 id="why-deming">Why Deming?</h3>
<p>W. Edwards Deming, known as the father of Total Quality Management, is best known for his work in post-war Japan, where his teachings on quality and systems thinking transformed industries. Deming wasn’t merely concerned with improving processes; his focus was on changing how we think and lead.</p>
<p>For me, discovering Deming’s work felt like finding a key piece of the leadership puzzle. His emphasis on continuous improvement and pride in workmanship deeply resonates with my own values. But what really struck me was how much Deming’s views on leadership aligned with what I had already believed. One of his quotes that I agree with wholeheartedly is, <em>“To manage one must lead. To lead, one must understand the work that he and his people are responsible for.”</em> This idea is central to effective leadership – ensuring there is a deep understanding of the work happening across the organisation and the challenges engineers face. Curiosity plays a vital role here too. By staying curious, continuously asking questions, and exploring how things work, one is better equipped to provide the right guidance and support. Deming’s philosophy reinforced this, showing that leadership is about more than oversight; it’s about being in tune with the system, the people involved, and the processes that drive improvement.</p>
<h3 id="deming-to-devops">Deming to DevOps</h3>
<p>Deming’s influence can be traced through modern methodologies such as <strong>Toyota’s Production System (TPS)</strong>, <strong>Lean Manufacturing</strong>, <strong>Agile</strong>, and <strong>DevOps</strong>. His teachings laid the foundation for continuous improvement, reducing waste, and optimising processes, all of which are central tenets of Lean and Agile. In the software world, these principles evolved further into DevOps, where collaboration and system optimisation are critical for improving quality and speed.</p>
<h3 id="demings-system-of-profound-knowledge">Deming’s System of Profound Knowledge</h3>
<p>At the heart of Deming’s philosophy is his <em>System of Profound Knowledge</em>, which consists of four key areas:</p>
<ol>
<li><strong>Appreciation for a system</strong> – Recognising that organisations are socio-technical systems, where nothing happens in isolation. Changing one part can have unintended consequences elsewhere, so we must optimise systems holistically.</li>
<li><strong>Knowledge about variation</strong> – Distinguishing between common cause (inherent in the process) and special cause (due to external factors) variations is key. Common cause issues require systemic changes, which fall under management’s responsibility.</li>
<li><strong>Theory of knowledge</strong> – Questioning why we know what we know, grounding actions in facts and context. Operational definitions ensure clarity and consistency in our understanding.</li>
<li><strong>Psychology</strong> – Refers to the human aspects of work. Intrinsic motivators and purpose are essential for creating productive and enjoyable work environments.</li>
</ol>
<p>For Staff+ Engineers, these concepts are invaluable when tackling complex systems. Whether we are improving processes, enhancing collaboration, or driving innovation, Deming’s principles guide us toward a more holistic understanding of the challenges we face.</p>
<h3 id="demings-14-points-for-management">Deming’s 14 Points for Management</h3>
<p>Deming’s <em>14 Points for Management</em> serve as a practical guide for leaders striving to create better systems and environments. While all the points are valuable, a few stood out to me as especially relevant for Staff+ Engineers:</p>
<ol>
<li><strong>Remove barriers to pride in workmanship</strong> – Empower engineers to take pride in their work by eliminating obstacles that hinder creativity and innovation. When people enjoy their work, it drives both personal satisfaction and organisational success.</li>
<li><strong>Drive out fear</strong> – Build a culture where open communication is encouraged, and people feel safe raising issues without fear of blame. This is closely related to the modern concept of psychological safety, which is crucial for fostering innovation and a supportive work environment.</li>
<li><strong>Break down silos</strong> – Promote collaboration across teams to ensure smoother workflows and better outcomes. When silos are broken down, organisations become more agile and effective.</li>
<li><strong>Institute training and self-improvement</strong> – Continuous learning is essential, not just for individual growth but for the long-term success of teams. Investing in self-improvement helps teams adapt and thrive in an ever-changing landscape.</li>
</ol>
<h3 id="practical-applications-in-modern-software-engineering">Practical Applications in Modern Software Engineering</h3>
<p>Deming’s teachings are directly applicable to modern software engineering practices. In my talk, I explored three key areas where these principles can be applied today: <strong>Shift Left</strong>, <strong>Site Reliability Engineering (SRE)</strong>, and <strong>Developer Productivity</strong>.</p>
<h4 id="shift-left">Shift Left</h4>
<p>Shift Left involves moving security and quality testing earlier in the software development lifecycle to detect issues sooner and reduce costs. Deming’s <strong>appreciation for a system</strong> fits perfectly with this approach—by integrating quality into the development process from the start, we reduce the need for inspection and rework later on. As Deming said, <em>“Quality does not just happen: it is built in.”</em> <strong>Adopting the new philosophy</strong> is also critical for embracing this shift, as it requires a mindset shift across the organisation. Everyone must be on board with the idea that quality is a shared responsibility, not something that can be <em>inspected</em> into a product, especially not at the end of the process. This mindset change helps ensure that quality is built in from the beginning rather than flung over the fence to dedicated test teams.</p>
<h4 id="site-reliability-engineering-sre">Site Reliability Engineering (SRE)</h4>
<p>SRE applies software engineering principles to IT operations, aiming to create scalable and reliable systems. Deming’s belief that <em>“A bad system will beat a good person every time”</em> is particularly relevant to SRE. When incidents occur, it’s not about individual failures but about systems allowing those failures to happen. <strong>Knowledge about variation</strong> is key here—understanding the different types of variation (such as common cause vs. special cause) allows us to address system issues effectively and improve reliability. <strong>Theory of knowledge</strong> also plays a crucial role. In SRE, SLOs are operational definitions that help us to measure system performance through automated monitoring and alerting, allowing for data-driven insights. This approach ensures that we’re continuously learning and improving based on real data rather than assumptions.</p>
<h4 id="developer-productivity">Developer Productivity</h4>
<p>Improving developer productivity has become a major focus in modern engineering teams. As Deming said, <em>“It isn’t enough to do your best; you have to know what to do, and then do your best.”</em> This aligns with his <strong>theory of knowledge</strong>, which emphasises the need for data-driven decisions. To improve productivity, we need to measure the right things and understand them within the context of our systems. Additionally, <strong>psychology</strong> plays a critical role—factors like job satisfaction, motivation, and psychological safety all directly impact productivity. By creating environments where developers feel valued and supported, we can significantly boost both productivity and morale.</p>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>Speaking at StaffPlus London 2024 was one of the highlights of my year. Travelling from New Zealand to such a renowned event and sharing my insights alongside experienced technical leaders was an incredibly rewarding experience. I am so grateful for the opportunity to explore how Deming’s timeless teachings continue to resonate in our modern world and how they can help us lead more effectively as Staff+ Engineers.</p>
<p>Reflecting on my relatively recent journey with Deming’s work, I’m reminded of his unwavering belief in continuous improvement and the pursuit of knowledge. For those of you in Staff+ roles, I encourage you to embrace systems thinking, foster collaboration, and always keep learning. As Deming famously said, <em>“Learning is not compulsory; it’s voluntary. Improvement is not compulsory; it’s voluntary. But to survive, we must learn.”</em></p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=Deming’s Wisdom for Staff+ Engineers: A Recap of My Talk at StaffPlus London 2024">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>Exploring Systems Thinking Through Russell Ackoff</title>
      <link>http://annievella.com/posts/exploring-systems-thinking-through-russell-ackoff/</link>
      <pubDate>Sat, 06 Jul 2024 09:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/exploring-systems-thinking-through-russell-ackoff/</guid>
      <description>
      
      
      <![CDATA[<p>Learning about Deming has led me to another incredible thinker - Russell Ackoff. Born in 1919, Ackoff is best known for his contributions to Systems Thinking.</p>
<p>In one of his lectures, <a href="https://youtu.be/yGN5DBpW93g">From Mechanistic to Systemic Thinking</a>, Ackoff discusses systems and the difference between analysis and synthesis. He explains that the essential properties of a system are unique to the system as a whole. These properties arise from the interactions between the parts of the system. In other words, a system is more than the sum of its parts; it is the product of their interactions.</p>
<p>At first glance, it might seem logical to understand a system by breaking it down into its individual parts and studying each part separately. This approach is called ‘analysis’ - basically, divide and conquer. But when you take a system apart, it loses its essential properties - just like a steering wheel on its own can’t ‘steer’.</p>
<p>In the 1950s, it became clear that analysis alone couldn&rsquo;t fully explain a system. This led to the development of another method of thinking - synthesis. Instead of breaking a system down into parts, synthesis looks at the system within the context of the larger system it operates in and tries to understand its role within that larger system.</p>
<figure class="center"><img src="http://annievella.com/images/systems-thinking-analysis-vs-synthesis.png"
    alt="Analysis vs Synthesis"><figcaption>
      <p>Analysis vs Synthesis</p>
    </figcaption>
</figure>

<p>Ackoff explains that analysis produces &ldquo;know-how,&rdquo; or knowledge - like instructions. However, knowledge alone doesn’t equal understanding. Understanding comes from explanations, which tell us why things work the way they do. Synthetic thinking helps us understand the role or function of a system within a larger system, providing deeper insights.</p>
<p>Ackoff’s insights emphasise that to truly understand and improve systems, we must consider both their individual components and their roles within larger systems. This holistic approach, known as Systems Thinking, is essential for driving meaningful change and innovation.</p>
<p><strong>Key Insights:</strong></p>
<ul>
<li>The essential properties of a system belong to the interactions between the parts, not to the parts themselves.</li>
<li>These properties are lost when a system is taken apart.</li>
<li>Analysis involves breaking a system into parts to understand how it works, yielding knowledge.</li>
<li>Synthesis involves viewing a system as part of a larger system to understand why it works, yielding understanding.</li>
<li>Explanation always lies outside the system.</li>
<li>Systems Thinking fuses analysis and synthesis, depending on whether we seek knowledge or understanding.</li>
</ul>
<p>Almost everything can be thought of as a system, making it fascinating to learn about different approaches to understanding them. I’m thoroughly enjoying this learning journey, inspired by pioneering thinkers like Russell Ackoff and W. Edwards Deming.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=Exploring Systems Thinking Through Russell Ackoff">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>Are You a Transactional or Developmental Leader?</title>
      <link>http://annievella.com/posts/are-you-a-transactional-or-developmental-leader/</link>
      <pubDate>Tue, 25 Jun 2024 19:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/are-you-a-transactional-or-developmental-leader/</guid>
      <description>
      
      
      <![CDATA[<p>In the fast-paced world of tech, leadership styles can make or break an organisation&rsquo;s success. Are you driving growth with a developmental mindset or merely maintaining the status quo with a transactional approach?</p>
<p>One of the best books I’ve read recently is Gene Kim and Steven Spear’s <a href="https://itrevolution.com/product/wiring-the-winning-organization/">Wiring the Winning Organisation</a>. It distils many great leadership theories into clear, actionable concepts. At the very end of the book, in Appendices A and B, they talk about the differences between transactional and developmental leadership. This is something I think about a lot but didn’t know the precise terms for until reading these sections.</p>
<h3 id="transactional-vs-developmental-leadership">Transactional vs. Developmental Leadership</h3>
<p>Transactional leaders focus on managing existing processes and resources (both people and tools) to maintain stability. They often rely on established procedures and immediate problem-solving. In contrast, developmental leaders emphasise continuous improvement and innovation. They design and enhance the &ldquo;social circuitry&rdquo; that allows teams to apply their creative energies toward new and better ways of working.</p>
<blockquote>
<p>While the transactions may be many, the mindset is not sufficiently dynamic. Rather, the developmental approach requires designing and improving the social circuitry by which people can best apply their creative energies to find new and better things to do with their time and the resources they have, and by developing new and better ways to do so.</p>
</blockquote>
<p style="margin-left: 40px; font-size: 0.8em;"><em>— Wiring the Winning Organization: Liberating Our Collective Greatness through Slowification, Simplification, and Amplification by Gene Kim, Steven J. Spear</em></p>
<p>This resonates strongly with me. I’m an avid believer in finding new and creative ways to achieve more by working smarter, not harder. I&rsquo;m convinced that it doesn’t take much effort to identify areas for improvement in most organisations, especially those that build software. Code review processes, build pipelines, and test runs are common areas that can and should be optimised. But it doesn&rsquo;t stop there - just take a look at the processes before and after these areas as well - requirements gathering, UI/UX design, system design, content sign-off, release processes, patching, vulnerability management, and incident management. There are countless areas where small tweaks can yield significant improvements.</p>
<p>Identifying areas for improvement is just the beginning though. To truly benefit, you also need to be willing to make changes — whether it&rsquo;s your thinking, your processes, or your structure.</p>
<h3 id="practical-examples-of-developmental-leadership">Practical Examples of Developmental Leadership</h3>
<p>This is where being a developmental leader comes in handy. Having the belief that what you’re lacking is knowledge, not additional people or tools, allows you to optimise processes so that existing individuals and teams in your organisation can work smarter. This is how developmental leaders can reach for “new frontiers,” as Gene and Steven put it.</p>
<p>Instead of always looking to add more people or tools, developmental leadership focuses on enhancing the creativity and problem-solving skills of the current team first. By doing so, any new hires brought on board will integrate into a more dynamic and effective environment, rather than just continuing the same old patterns.</p>
<p>For example, in a previous job, our unit tests were starting to take too long. Granted, we had about 1000 unit tests, but 20 minutes was too long to wait. We refactored our tests to remove any dependencies between them (which shouldn’t have been there to start with) and were able to run them in parallel, cutting the time to run them down to under 5 minutes, which was far more manageable.</p>
<p>In another instance, we discovered that development wasn’t starting until UI/UX designs were fully complete. After some negotiation with our design team, we decided to start with some simpler wireframe designs that allowed some boilerplate development to start earlier while the finer, pixel-perfect details were being finalised. This allowed development to start earlier and even allowed for better quality outcomes as developers were able to provide useful feedback to the design team about how the feature felt once it was being developed.</p>
<p>Transactional leaders are more likely to reach for more resources, in whatever form they feel is lacking, to continue to work in the same manner as the existing setup. In some cases, it may require trading off one demand for another, but in many cases, it just means adding more to the equation.</p>
<p>There will also be cases where adding more people or tools is really the only option, but this should be the exception, not the norm. Consider the fact that adding more tools or people comes at a big cost - not just the initial financial outlay, but the costs of onboarding new people or incorporating new tools into your processes, not to mention the ongoing increased costs like salaries and maintenance.</p>
<p>For me, there is something incredibly satisfying about optimisation and improved efficiency. It’s a bit like solving a puzzle. It starts with acknowledging that things aren’t perfect and then mapping out your processes so that you can break them up into smaller parts that are easier to understand. You need to engage with the people involved at each step, and truly listen to what they have to say. Perhaps you can do more in parallel, or perhaps you can remove some redundant steps. Maybe you discover that information is missing at key points in a process, causing delays downstream. Experiment a little and be open to failing and trying again. You often learn more from your failures than from your successes anyway!</p>
<p>Reading <em>Wiring the Winning Organisation</em> has reinforced my commitment to leading with a developmental mindset. It’s not just about optimising processes and boosting efficiency; it’s about cultivating an environment where creativity and problem-solving thrive. This approach is now something I deliberately look for in companies I choose to work with, as it aligns perfectly with my own leadership philosophy.</p>
<p>So, would you say you have a developmental mindset, and are you applying that mindset at work? If not, what would need to be true for you to give it a go?</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=Are You a Transactional or Developmental Leader?">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>First Impressions of the Apple Vision Pro</title>
      <link>http://annievella.com/posts/first-impressions-of-the-apple-vision-pro/</link>
      <pubDate>Sun, 28 Apr 2024 14:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/first-impressions-of-the-apple-vision-pro/</guid>
      <description>
      
      
      <![CDATA[<p>It’s been about a month since I received my much-anticipated Apple Vision Pro. Truth be told, I ordered it as soon as it became available in the US in early February 2024. With the help of some truly wonderful friends, I figured it wouldn’t be too hard to get my hands on one. Unfortunately, that wasn’t the case, but after jumping through various hoops, I finally got my hands on it in late March. I’m endlessly thankful to my friends for everything they had to go through - I hope to be able to repay the favour one day!</p>
<p>I’ve said it before and I’ll say it again - I’m a self-proclaimed computer nerd. I literally still have the Commodore 64 that caused me to fall in love with computers in the first place. I also still have my old Game Boy, Nintendo Entertainment System, and even Super Nintendo! There was no way I wasn’t going to do whatever it took to get my hands on a first-gen Apple Vision Pro!</p>
<h3 id="first-impressions">First Impressions</h3>
<figure class="center"><img src="http://annievella.com/images/apple-vision-pro.jpeg"
    alt="Apple Vision Pro"><figcaption>
      <p>Apple Vision Pro</p>
    </figcaption>
</figure>

<p>As with every Apple product, the Apple Vision Pro is a beautiful piece of technology and comes meticulously packaged. Even the ordering experience was seamless; since it has to fit your face, the process includes using the front-facing camera of your phone to measure your head and select the right size headband and light seal.</p>
<p>Setting it up was a cake-walk. After putting it on and starting it up, it guides you through various steps like logging in with your Apple ID and essential things for an AR/VR device like this - eye and hand setup. Before you know it, you’re staring at what looks like a standard Apple home screen, except it’s floating in air. And that’s when you start to understand the potential of this thing.</p>
<figure class="center"><img src="http://annievella.com/images/apple-vision-pro-screenshot-of-home-screen.jpeg"
    alt="Apple Vision Pro - Home Screen"><figcaption>
      <p>Apple Vision Pro - Home Screen</p>
    </figcaption>
</figure>

<p>It didn’t take much to get used to using my eyes to navigate around - it really does feel quite natural and ridiculously cool. Just look at an icon and it highlights. Then tap your thumb and forefinger together and voilà, that app now opens.</p>
<p>Interestingly, when my father (who’s well into his 70s) tried it out, it took a while for him to get through the eye setup (we wondered if it’s due to his imperfect eyesight), but once he was done with that, he was able to use it quite naturally. Conversely, when the daughter of a good friend gave it a go, she took to it like a duck to water and was navigating her way around it like a pro in a matter of seconds.</p>
<p>In order to download any apps, I had to set up a secondary Apple ID with the region set to the USA. That’s because theoretically, the Apple Vision Pro is only available in the US at this stage. Thankfully there’s an option to only use this secondary Apple ID for the App Store, that way you can keep using your usual Apple ID for everything else.</p>
<p>There aren’t that many (free) apps built with native VisionOS support yet, but there are a few fun ones:</p>
<ul>
<li><strong>Encounter Dinosaurs</strong>: Showcases the incredible possibilities of this technology. The butterfly can land on your hand and the dinosaurs appear to come out of the screen and try to sniff you—it is so realistic that it makes you take a step back!</li>
</ul>
<figure class="center"><img src="http://annievella.com/images/apple-vision-pro-screenshot-of-encounter-dinosaurs.jpeg"
    alt="Apple Vision Pro - Encounter Dinosaurs"><figcaption>
      <p>Apple Vision Pro - Encounter Dinosaurs</p>
    </figcaption>
</figure>

<ul>
<li><strong>Insight Heart</strong>: Renders a realistic human heart beating in thin air. It allows you to turn it around, zoom in and out, and look at what the heart is doing under different circumstances. This gives us a small taste of how the Apple Vision Pro could be used for educational purposes.</li>
</ul>
<figure class="center"><img src="http://annievella.com/images/apple-vision-pro-screenshot-of-insight-heart.jpeg"
    alt="Apple Vision Pro - Insight Heart"><figcaption>
      <p>Apple Vision Pro - Insight Heart</p>
    </figcaption>
</figure>

<ul>
<li><strong>Mindfulness</strong>: A simple app that guides you through a short meditation. I like to use it together with one of the immersive environments. It’s a nice way to take a break and relax.</li>
</ul>
<figure class="center"><img src="http://annievella.com/images/apple-vision-pro-screenshot-of-mindfulness.jpeg"
    alt="Apple Vision Pro - Mindfulness"><figcaption>
      <p>Apple Vision Pro - Mindfulness</p>
    </figcaption>
</figure>

<ul>
<li><strong>Air Draw</strong>: Allows you to draw in the air using your fingers. A bit of lighthearted fun.</li>
</ul>
<figure class="center"><img src="http://annievella.com/images/apple-vision-pro-screenshot-of-air-draw.jpeg"
    alt="Apple Vision Pro - Air Draw"><figcaption>
      <p>Apple Vision Pro - Air Draw</p>
    </figcaption>
</figure>

<p>I haven’t been able to download the native Netflix or YouTube apps, but I can watch videos on both of these in Safari and that works quite well. There are small speakers on the side arms that the head bands clip on to and they work really well.</p>
<p>All of the usual apps are available, like messages, email, notes, etc. You can even use Excel and Word!</p>
<p>There are probably many others that aren’t free but I’d have to jump through even more hoops to purchase those so I might just wait until I can download them through my standard Apple ID!</p>
<h3 id="what-i-dislike-about-it">What I dislike about it</h3>
<p>My major complaint is that the Apple Vision Pro is quite heavy and somewhat uncomfortable to wear. I don’t know if it’s because I’m quite a small person with a small face, but I find that I can’t wear it for more than maybe an hour before my face starts to get quite sore. I might not have it positioned right, or perhaps I need to keep trying different light seals and headbands, but I find it hard to believe that any combination of those will ever make this a comfortable thing to wear.</p>
<h3 id="am-i-happy-with-it">Am I happy with it?</h3>
<p>Hell yeah. Even though it’s quite uncomfortable to wear for long periods of time, there&rsquo;s no denying it - this technology is incredible. Navigating using your eyes and selecting things with tiny hand gestures is a whole new way of interacting with a computer. Windows floating in the air, pinned to their physical location such that you can walk around (or through) them, even casting shadows behind them, turns all your surroundings into a giant screen. The AR/VR experiences that interact with you and the adjustable immersion controls are fascinating.</p>
<h3 id="in-summary">In summary</h3>
<p>The Apple Vision Pro is a whole new paradigm of computing. This is the first version and the worst it’ll ever be - I’m sure it’ll get lighter and more comfortable to wear as future versions are released. For me, it’s a bit more of a toy than a ‘computer’ at this stage, but I’m super happy to have one to play with. The amount of technology packed into this device is hugely impressive, and VisionOS makes interacting with it feel like a dream. Perhaps if I find some spare time, I’ll have a go at writing an app for it!</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=First Impressions of the Apple Vision Pro">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>What is a Good Strategy?</title>
      <link>http://annievella.com/posts/what-is-a-good-strategy/</link>
      <pubDate>Sun, 25 Feb 2024 14:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/what-is-a-good-strategy/</guid>
      <description>
      
      
      <![CDATA[<p>Strategies play a critical role in aligning teams towards a common goal, especially in large organisations. Being able to create, review and execute a good strategy is an important aspect of many leadership roles, yet it’s a hard one to nail. Even defining what makes a strategy truly effective can be surprisingly challenging - ask ten different leaders and you&rsquo;re likely to get ten different interpretations.</p>
<p>More often than not, what people describe as a strategy is actually an aspirational goal or vision. They articulate <em>where</em> we want to go but not <em>how</em> to get there.</p>
<p>So, what <em>is</em> a good strategy? Richard Rumelt answers this question succinctly in his book, <a href="https://www.amazon.com/Good-Strategy-Bad-difference-matters/dp/1781256179">Good Strategy/Bad Strategy</a>. He proposes that a good strategy must have what he calls a <em>kernel</em>, making it significantly easier to create, describe, and evaluate strategies once you grasp this concept. This was probably the most eye-opening part of this book for me and I&rsquo;ve used it as a mental model to evaluate strategies ever since.</p>
<h3 id="the-kernel-of-a-good-strategy">The Kernel of a Good Strategy</h3>
<p>Rumelt describes the “kernel” of a strategy as having three simple components:</p>
<p><strong>Diagnosis</strong>: The diagnosis clarifies the nature of the challenge, cutting through the complexity to highlight the critical elements that need attention. It simplifies the situation by isolating key issues to focus on.</p>
<p><strong>Guiding Policy</strong>: The guiding policy outlines the approach to address the identified challenges. It involves selecting a path that includes necessary trade-offs, recognising that not all objectives can be pursued simultaneously and prioritising where efforts should be concentrated.</p>
<p><strong>Coherent Actions</strong>: Coherent actions are the specific, aligned steps designed to execute the guiding policy. These actions are coordinated to ensure they collectively contribute to overcoming the identified challenge, following the strategic direction set by the diagnosis and guiding policy.</p>
<h3 id="example-engineering-strategy-boosting-developer-productivity">Example Engineering Strategy: Boosting Developer Productivity</h3>
<p>Over the last couple of years, there’s been increasing pressure to do more with less. A tougher economic climate demands that we be more efficient. In engineering teams, this often translates to enhancing developer productivity. Let&rsquo;s work through this as an example of how to use Rumelt&rsquo;s kernel to craft a simple but effective strategy.</p>
<p><strong>Diagnosis</strong>: We see that our developers are spending too much time on tasks that don&rsquo;t directly contribute to product development. This slows down our release cycles and dampens morale.</p>
<p><strong>Guiding Policy</strong>: The approach chosen is to modernise our systems and streamline development processes, recognising the trade-offs involved. We may need to pause other projects or redirect resources, but this focus is essential for tangible improvements.</p>
<p><strong>Coherent Actions</strong>:</p>
<ul>
<li>Adopt new development tools suited to our current needs (e.g. AI coding assistants)</li>
<li>Reduce technical debt and variation by refactoring and simplifying our codebase</li>
<li>Implement required quality and security gates in your pipelines (e.g. automated tests)</li>
<li>Educate the team on these new methodologies and tools</li>
</ul>
<p>This is an overly-simplified example but hopefully it serves to highlight the three important elements that are at the core of a good strategy. So, next time you’re asked to write or review a strategy, ask yourself whether it describes not just what it’s trying to accomplish, but also why and how.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=What is a Good Strategy?">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>An Early Exploration of AI-First Development</title>
      <link>http://annievella.com/posts/an-early-exploration-of-ai-first-development/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/an-early-exploration-of-ai-first-development/</guid>
      <description>
      
      
      <![CDATA[<p>For years, the core of software engineering has remained fairly stable despite the fast pace of technological advancement. We’ve had other &ldquo;-First&rdquo; methodologies like Code-First and API-First, which reshaped aspects of the SDLC, but not fundamentally so. However, with the advent of generative AI, we’re left wondering: what will AI-First development look like, and how will it change our familiar landscape? As a software engineer who has loved being one for many years, I&rsquo;m truly intrigued by AI-First development - how it might transform software building processes, redefine software engineers&rsquo; roles, and what we can do now to best prepare for this new world.</p>
<p>The buzz around &ldquo;AI-First&rdquo; development is already sparking lively discussions among engineers.
<figure class="center"><img src="http://annievella.com/images/AI-First-Tweet-1.png"
    alt="Alt text"><figcaption>
      <p><a href="https://x.com/Austen/status/1755283313034695068?s=20">https://x.com/Austen/status/1755283313034695068?s=20</a></p>
    </figcaption>
</figure>
</p>
<p>It&rsquo;s clear from these conversations that adopting an AI-First approach isn&rsquo;t a distant future; it&rsquo;s happening now, shaping the way we think about coding from the ground up.
<figure class="center"><img src="http://annievella.com/images/AI-First-Tweet-2.png"
    alt="Alt text"><figcaption>
      <p><a href="https://x.com/LowerLeftPE/status/1755305312481870042?s=20">https://x.com/LowerLeftPE/status/1755305312481870042?s=20</a></p>
    </figcaption>
</figure>
</p>
<p>I&rsquo;m convinced that the rollout of tools like GitHub Copilot represents a pivotal moment, both signifying and facilitating a shift to AI-First development. The often-tedious task of crafting large quantities of boilerplate code or scouring Stack Overflow for snippets to solve your specific problem is now replaced by a helpful AI coding assistant - a “copilot” - right there in your IDE. This shift promises not only a new way of working but a revitalisation of our roles, beckoning us back to the broader, perhaps more impactful responsibilities that have gradually been outsourced to other more specialised roles, especially since the invention of Scrum.</p>
<p>This era of AI-assisted coding not only promises to streamline the coding process but also stands to significantly enhance Developer Experience (DX) and Developer Productivity. The immediate helpful assistance and feedback provided by AI coding assistants can dramatically reduce the time spent on debugging and searching for solutions, allowing developers to focus more on creative problem-solving and high-level system design. It will be fascinating to see how AI-First Development might further impact Developer Experience and Productivity.</p>
<p>The shift towards AI-First development is poised to reshape not only the technical landscape of software engineering but also the very fabric of collaboration and education within the field. For example, as we increasingly rely on AI coding assistants, we may find that traditional collaboration might erode, with engineers choosing to lean more on AI assistance than on the expertise of their peers. Recent conversations with Software Engineering PhD candidates at Auckland University revealed that this is already happening with first-year software engineering students. How will beginners gain that fundamental knowledge in the future? Our strategies for teaching and learning need to adapt quickly, ensuring that engineers are not only technically proficient but also adept at collaborating in an AI-enhanced future.</p>
<p>Another potential side-effect of AI-First development might be to make the tech industry more inclusive and diverse. By democratising access to learning and development tools, AI has the potential to level the playing field for all, breaking down barriers that have historically limited participation from diverse groups.</p>
<p>The future of software engineering in an AI-First world is both exciting and uncertain. Like the lessons learned from past technological shifts, this new era invites us to question our assumptions, explore the unknown, and embrace the possibilities that lie beyond the conventional. As software engineers, we are at the forefront of this exploration, navigating the balance between leveraging AI&rsquo;s potential and preserving the core values that define our craft.</p>
<p>I, for one, am increasingly fascinated by this topic and plan to delve much deeper into it, aiming to share my findings and thoughts through more in-depth articles in the future.</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=An Early Exploration of AI-First Development">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>Embracing the Unexpected</title>
      <link>http://annievella.com/posts/embracing-the-unexpected/</link>
      <pubDate>Mon, 29 Jan 2024 09:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/embracing-the-unexpected/</guid>
      <description>
      
      
      <![CDATA[<p>Reflection is something I really enjoy and do rather frequently. There&rsquo;s something about revisiting old memories with fresh eyes that I find fascinating and satisfying.</p>
<p>One memory that frequently pops into my mind from my high school days is the time I received a <a href="https://en.wikipedia.org/wiki/Ren%C3%A9_Magritte">Magritte</a> art book as a prize for my achievements in mathematics. This really threw me. Had there been a mix-up? An art book for a science nerd like me seemed so out of place. But, as it turned out, that&rsquo;s exactly where its magic lay.</p>
<p>René Magritte&rsquo;s surreal art, blending the absurd with the profound, opened up a world I had never even thought to explore. He had a way of making people question their reality through his art. His famous work, <a href="https://en.wikipedia.org/wiki/The_Treachery_of_Images">The Treachery of Images</a>, showcases this brilliantly. It features a painting of a pipe with a caption, ‘Ceci n&rsquo;est pas une pipe’ (‘This is not a pipe’), reminding us that an image or a word representing an object is not the object itself. This unexpected push to see things from a different angle, to find beauty in questioning and curiosity, was far more than an art lesson; it was a call to open my mind and break free from conventional thinking - something that&rsquo;s become a cornerstone in my career.</p>
<p>Even though I no longer have the art book itself, the impact it had on me remains. It&rsquo;s like it left me with a blueprint on how to look at the world: seek out the extraordinary in the ordinary, be inspired by the unconventional, and always be ready to embrace the unknown. These lessons have greatly influenced my approach to technology and leadership, constantly inspiring me to imagine the impossible, challenge the status quo, and seek new paths.</p>
<p>I&rsquo;m super thankful for that teacher who, with a gift that seemed so odd at the time, opened my eyes to a whole new way of thinking. It&rsquo;s a lesson that&rsquo;s truly stuck with me, shaping how I see the world and tackle problems.</p>
<p>How about you? Have you ever received a thoughtful gift that ended up changing your perspective way more than you&rsquo;d have thought?</p>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=Embracing the Unexpected">Reply to this post by email</a>]]></description>
    </item>
    <item>
      <title>2023 In Review: A Year of Rediscovery and Growth</title>
      <link>http://annievella.com/posts/2023-in-review/</link>
      <pubDate>Sun, 14 Jan 2024 13:00:00 +1200</pubDate><author>annie.luxton@gmail.com (Annie Vella)</author>
      <guid>http://annievella.com/posts/2023-in-review/</guid>
      <description>
      
      
      <![CDATA[<p>Returning to work after the holiday season, I find myself reflecting on a rather remarkable 2023. It was a year where innovative technologies like generative AI and advancements in quantum computing moved beyond mere buzzwords, inspiring me to delve deeper into my curiosity and passions. This reawakening not only captured my attention but also reinforced my belief in the transformative power of technology. Discovering Deming and his philosophy was a turning point for me, providing clarity and reinforcing my principles in quality, continuous improvement and leadership.</p>
<p>Transitioning into a role that allows me to prioritize deep thinking and learning was a highlight of my year. This change is more closely aligned with my passions, paving a path for personal growth and development.</p>
<p>In 2023, I also tackled my intense apprehension of public speaking head-on. I seized every opportunity to speak on subjects that I feel strongly about, enriching my experience and expanding my network. Engaging with diverse minds at conferences, meetups, and online platforms like Rands Leadership Slack was particularly fulfilling. The &lsquo;donut&rsquo; sessions in RLS, connecting me with someone new each month, were a source of inspiration and fresh perspectives.</p>
<p>Mentorship continued to play a significant role in my life. While guiding others, I found myself learning and growing alongside them. And for the first time, I experienced the other side of mentorship, gaining invaluable insights from my own mentor.</p>
<p>As I look ahead, I&rsquo;m excited to build on these experiences. I aim to deepen my learning, hopefully embarking on a journey of post-graduate study. I plan to continue improving my public speaking skills, with the goal of presenting at an international conference. Reading more, writing across various platforms and maintaining a healthy lifestyle through exercise and travel are all part of my 2024 agenda as well.</p>
<p>Here&rsquo;s to a year filled with curiosity and learning!</p>
<p><strong>Key Accomplishments of 2023:</strong></p>
<p><em>Conference Talks:</em></p>
<ul>
<li>Code Camp Wellington, 15 Apr</li>
<li>DevFest Auckland, 12 Nov</li>
</ul>
<p><em>Panels:</em></p>
<ul>
<li>Infosys International Women’s Day Panel, 8 Mar</li>
<li>DevOps Summit Panel on discussing the capabilities of a world class DevOps strategy, 14 June</li>
<li>Movac Panel on building diverse and high-performance engineering cultures, 21 June</li>
<li>Shadowtech Panel on a day in the life of an Engineer at Westpac, 14 Sept</li>
<li>DevFest Career Panel, 12 Nov</li>
<li>TechWomen NZ and CyberCX Celebration Panel, 5 Dec</li>
</ul>
<p><em>Conferences Attended:</em></p>
<ul>
<li>Dev Day Aotearoa, 13 Sept</li>
<li>Cyber Resilience Summit Auckland, 11 Oct</li>
<li>DevOps Talks Conference, 21 Nov</li>
</ul>
<p><em>Luncheons:</em></p>
<ul>
<li>The IT and Cybersecurity Leaders&rsquo; Roundtable, 31 May</li>
</ul>
<p><em>Award Nominations:</em></p>
<ul>
<li>Finalist, New Zealand Women in Security Awards - Best Secure Coder Category</li>
</ul>
<p><em>Books Read:</em></p>
<ul>
<li>&ldquo;Staff Engineer&rdquo; by Will Larson</li>
<li>&ldquo;The Staff Engineer’s Path&rdquo; by Tanya Reilly</li>
<li>&ldquo;Deming’s Journey to Profound Knowledge&rdquo; by John Willis</li>
<li>&ldquo;Out of the Crisis&rdquo; by W. Edwards Deming</li>
<li>&ldquo;Wiring the Winning Organisation&rdquo; by Gene Kim &amp; Dr. Steve Spear</li>
</ul>
]]><![CDATA[<hr><p>Thanks for reading this post via RSS! 👋</p>]]><![CDATA[<a href="mailto:annie.luxton@gmail.com?subject=2023 In Review: A Year of Rediscovery and Growth">Reply to this post by email</a>]]></description>
    </item>
  </channel>
</rss>
